{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathML = void 0;\nvar InputJax_js_1 = require(\"../core/InputJax.js\");\nvar Options_js_1 = require(\"../util/Options.js\");\nvar FunctionList_js_1 = require(\"../util/FunctionList.js\");\nvar FindMathML_js_1 = require(\"./mathml/FindMathML.js\");\nvar MathMLCompile_js_1 = require(\"./mathml/MathMLCompile.js\");\nvar MathML = function (_super) {\n  __extends(MathML, _super);\n  function MathML(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = this;\n    var _a = __read((0, Options_js_1.separateOptions)(options, FindMathML_js_1.FindMathML.OPTIONS, MathMLCompile_js_1.MathMLCompile.OPTIONS), 3),\n      mml = _a[0],\n      find = _a[1],\n      compile = _a[2];\n    _this = _super.call(this, mml) || this;\n    _this.findMathML = _this.options['FindMathML'] || new FindMathML_js_1.FindMathML(find);\n    _this.mathml = _this.options['MathMLCompile'] || new MathMLCompile_js_1.MathMLCompile(compile);\n    _this.mmlFilters = new FunctionList_js_1.FunctionList();\n    return _this;\n  }\n  MathML.prototype.setAdaptor = function (adaptor) {\n    _super.prototype.setAdaptor.call(this, adaptor);\n    this.findMathML.adaptor = adaptor;\n    this.mathml.adaptor = adaptor;\n  };\n  MathML.prototype.setMmlFactory = function (mmlFactory) {\n    _super.prototype.setMmlFactory.call(this, mmlFactory);\n    this.mathml.setMmlFactory(mmlFactory);\n  };\n  Object.defineProperty(MathML.prototype, \"processStrings\", {\n    get: function () {\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MathML.prototype.compile = function (math, document) {\n    var mml = math.start.node;\n    if (!mml || !math.end.node || this.options['forceReparse'] || this.adaptor.kind(mml) === '#text') {\n      var mathml = this.executeFilters(this.preFilters, math, document, (math.math || '<math></math>').trim());\n      var doc = this.checkForErrors(this.adaptor.parse(mathml, 'text/' + this.options['parseAs']));\n      var body = this.adaptor.body(doc);\n      if (this.adaptor.childNodes(body).length !== 1) {\n        this.error('MathML must consist of a single element');\n      }\n      mml = this.adaptor.remove(this.adaptor.firstChild(body));\n      if (this.adaptor.kind(mml).replace(/^[a-z]+:/, '') !== 'math') {\n        this.error('MathML must be formed by a <math> element, not <' + this.adaptor.kind(mml) + '>');\n      }\n    }\n    mml = this.executeFilters(this.mmlFilters, math, document, mml);\n    return this.executeFilters(this.postFilters, math, document, this.mathml.compile(mml));\n  };\n  MathML.prototype.checkForErrors = function (doc) {\n    var err = this.adaptor.tags(this.adaptor.body(doc), 'parsererror')[0];\n    if (err) {\n      if (this.adaptor.textContent(err) === '') {\n        this.error('Error processing MathML');\n      }\n      this.options['parseError'].call(this, err);\n    }\n    return doc;\n  };\n  MathML.prototype.error = function (message) {\n    throw new Error(message);\n  };\n  MathML.prototype.findMath = function (node) {\n    return this.findMathML.findMath(node);\n  };\n  MathML.NAME = 'MathML';\n  MathML.OPTIONS = (0, Options_js_1.defaultOptions)({\n    parseAs: 'html',\n    forceReparse: false,\n    FindMathML: null,\n    MathMLCompile: null,\n    parseError: function (node) {\n      this.error(this.adaptor.textContent(node).replace(/\\n.*/g, ''));\n    }\n  }, InputJax_js_1.AbstractInputJax.OPTIONS);\n  return MathML;\n}(InputJax_js_1.AbstractInputJax);\nexports.MathML = MathML;","map":{"version":3,"mappings":"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","names":["__extends","options","FindMathML_js_1","OPTIONS","MathMLCompile_js_1","mml","find","compile","_super","_this","findMathML","mathml","mmlFilters","FunctionList_js_1","MathML","adaptor","setAdaptor","mmlFactory","setMmlFactory","Object","math","document","start","node","end","kind","executeFilters","preFilters","trim","doc","checkForErrors","parse","body","childNodes","length","error","remove","firstChild","replace","postFilters","err","tags","textContent","call","message","Error","findMath","parseAs","forceReparse","FindMathML","MathMLCompile","parseError","InputJax_js_1","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/input/mathml.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MathML InputJax object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractInputJax} from '../core/InputJax.js';\nimport {defaultOptions, separateOptions, OptionList} from '../util/Options.js';\nimport {FunctionList} from '../util/FunctionList.js';\nimport {MathDocument} from '../core/MathDocument.js';\nimport {MathItem} from '../core/MathItem.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {MmlFactory} from '../core/MmlTree/MmlFactory.js';\n\nimport {FindMathML} from './mathml/FindMathML.js';\nimport {MathMLCompile} from './mathml/MathMLCompile.js';\n\n/*****************************************************************/\n/**\n *  Implements the MathML class (extends AbstractInputJax)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class MathML<N, T, D> extends AbstractInputJax<N, T, D> {\n\n  /**\n   * The name of this input jax\n   */\n  public static NAME: string = 'MathML';\n\n  /**\n   * @override\n   */\n  public static OPTIONS: OptionList = defaultOptions({\n    parseAs: 'html',         // Whether to use HTML or XML parsing for the MathML string\n    forceReparse: false,     // Whether to force the string to be reparsed, or use the one from the document DOM\n    FindMathML: null,        // The FindMathML instance to override the default one\n    MathMLCompile: null,     // The MathMLCompile instance to override the default one\n    /*\n     * The function to use to handle a parsing error (throw an error by default)\n     */\n    parseError: function (node: Node) {\n      this.error(this.adaptor.textContent(node).replace(/\\n.*/g, ''));\n    }\n  }, AbstractInputJax.OPTIONS);\n\n  /**\n   * The FindMathML instance used to locate MathML in the document\n   */\n  protected findMathML: FindMathML<N, T, D>;\n\n  /**\n   * The MathMLCompile instance used to convert the MathML tree to internal format\n   */\n  protected mathml: MathMLCompile<N, T, D>;\n\n  /**\n   * A list of functions to call on the parsed MathML DOM before conversion to internal structure\n   */\n  public mmlFilters: FunctionList;\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList = {}) {\n    let [mml, find, compile] = separateOptions(options, FindMathML.OPTIONS, MathMLCompile.OPTIONS);\n    super(mml);\n    this.findMathML = this.options['FindMathML'] || new FindMathML<N, T, D>(find);\n    this.mathml = this.options['MathMLCompile'] || new MathMLCompile<N, T, D>(compile);\n    this.mmlFilters = new FunctionList();\n  }\n\n  /**\n   * Set the adaptor in any of the objects that need it\n   *\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    super.setAdaptor(adaptor);\n    this.findMathML.adaptor = adaptor;\n    this.mathml.adaptor = adaptor;\n  }\n\n  /**\n   * @param {MmlFactory} mmlFactory  The MmlFactory to use for this MathML input jax\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    super.setMmlFactory(mmlFactory);\n    this.mathml.setMmlFactory(mmlFactory);\n  }\n\n  /**\n   * Don't process strings (process nodes)\n   *\n   * @override\n   */\n  public get processStrings() {\n    return false;\n  }\n\n  /**\n   * Convert a MathItem to internal format:\n   *   If there is no existing MathML node, or we are asked to reparse everything\n   *     Execute the preFilters on the math\n   *     Parse the MathML string in the desired format, and check the result for errors\n   *     If we got an HTML document:\n   *       Check that it has only one child (the <math> element), and use it\n   *     Otherwise\n   *       Use the root element from the XML document\n   *     If the node is not a <math> node, report the error.\n   *   Execute the mmlFilters on the parsed MathML\n   *   Compile the MathML to internal format, and execute the postFilters\n   *   Return the resulting internal format\n   *\n   * @override\n   */\n  public compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>) {\n    let mml = math.start.node;\n    if (!mml || !math.end.node || this.options['forceReparse'] || this.adaptor.kind(mml) === '#text') {\n      let mathml = this.executeFilters(this.preFilters, math, document, (math.math || '<math></math>').trim());\n      let doc = this.checkForErrors(this.adaptor.parse(mathml, 'text/' + this.options['parseAs']));\n      let body = this.adaptor.body(doc);\n      if (this.adaptor.childNodes(body).length !== 1) {\n        this.error('MathML must consist of a single element');\n      }\n      mml = this.adaptor.remove(this.adaptor.firstChild(body)) as N;\n      if (this.adaptor.kind(mml).replace(/^[a-z]+:/, '') !== 'math') {\n        this.error('MathML must be formed by a <math> element, not <' + this.adaptor.kind(mml) + '>');\n      }\n    }\n    mml = this.executeFilters(this.mmlFilters, math, document, mml);\n    return this.executeFilters(this.postFilters, math, document, this.mathml.compile(mml as N));\n  }\n\n  /**\n   * Check a parsed MathML string for errors.\n   *\n   * @param {D} doc  The document returns from the DOMParser\n   * @return {D}     The document\n   */\n  protected checkForErrors(doc: D): D {\n    let err = this.adaptor.tags(this.adaptor.body(doc), 'parsererror')[0];\n    if (err) {\n      if (this.adaptor.textContent(err) === '') {\n        this.error('Error processing MathML');\n      }\n      this.options['parseError'].call(this, err);\n    }\n    return doc;\n  }\n\n  /**\n   * Throw an error\n   *\n   * @param {string} message  The error message to produce\n   */\n  protected error(message: string) {\n    throw new Error(message);\n  }\n\n  /**\n   * @override\n   */\n  public findMath(node: N) {\n    return this.findMathML.findMath(node);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}