{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtableMixin = void 0;\nvar BBox_js_1 = require(\"../../../util/BBox.js\");\nvar string_js_1 = require(\"../../../util/string.js\");\nvar numeric_js_1 = require(\"../../../util/numeric.js\");\nfunction CommonMtableMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n    function class_1() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var _this = _super.apply(this, __spreadArray([], __read(args), false)) || this;\n      _this.numCols = 0;\n      _this.numRows = 0;\n      _this.data = null;\n      _this.pwidthCells = [];\n      _this.pWidth = 0;\n      _this.numCols = (0, numeric_js_1.max)(_this.tableRows.map(function (row) {\n        return row.numCells;\n      }));\n      _this.numRows = _this.childNodes.length;\n      _this.hasLabels = _this.childNodes.reduce(function (value, row) {\n        return value || row.node.isKind('mlabeledtr');\n      }, false);\n      _this.findContainer();\n      _this.isTop = !_this.container || _this.container.node.isKind('math') && !_this.container.parent;\n      if (_this.isTop) {\n        _this.jax.table = _this;\n      }\n      _this.getPercentageWidth();\n      var attributes = _this.node.attributes;\n      _this.frame = attributes.get('frame') !== 'none';\n      _this.fLine = _this.frame && attributes.get('frame') ? .07 : 0;\n      _this.fSpace = _this.frame ? _this.convertLengths(_this.getAttributeArray('framespacing')) : [0, 0];\n      _this.cSpace = _this.convertLengths(_this.getColumnAttributes('columnspacing'));\n      _this.rSpace = _this.convertLengths(_this.getRowAttributes('rowspacing'));\n      _this.cLines = _this.getColumnAttributes('columnlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.rLines = _this.getRowAttributes('rowlines').map(function (x) {\n        return x === 'none' ? 0 : .07;\n      });\n      _this.cWidths = _this.getColumnWidths();\n      _this.stretchRows();\n      _this.stretchColumns();\n      return _this;\n    }\n    Object.defineProperty(class_1.prototype, \"tableRows\", {\n      get: function () {\n        return this.childNodes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    class_1.prototype.findContainer = function () {\n      var node = this;\n      var parent = node.parent;\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    };\n    class_1.prototype.getPercentageWidth = function () {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox_js_1.BBox.fullWidth;\n      } else {\n        var width = this.node.attributes.get('width');\n        if ((0, string_js_1.isPercent)(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    };\n    class_1.prototype.stretchRows = function () {\n      var equal = this.node.attributes.get('equalrows');\n      var HD = equal ? this.getEqualRowHeight() : 0;\n      var _a = equal ? this.getTableData() : {\n          H: [0],\n          D: [0]\n        },\n        H = _a.H,\n        D = _a.D;\n      var rows = this.tableRows;\n      for (var i = 0; i < this.numRows; i++) {\n        var hd = equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null;\n        rows[i].stretchChildren(hd);\n      }\n    };\n    class_1.prototype.stretchColumns = function () {\n      for (var i = 0; i < this.numCols; i++) {\n        var width = typeof this.cWidths[i] === 'number' ? this.cWidths[i] : null;\n        this.stretchColumn(i, width);\n      }\n    };\n    class_1.prototype.stretchColumn = function (i, W) {\n      var e_1, _a, e_2, _b, e_3, _c;\n      var stretchy = [];\n      try {\n        for (var _d = __values(this.tableRows), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var row = _e.value;\n          var cell = row.getChild(i);\n          if (cell) {\n            var child = cell.childNodes[0];\n            if (child.stretch.dir === 0 && child.canStretch(2)) {\n              stretchy.push(child);\n            }\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var count = stretchy.length;\n      var nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          var all = count > 1 && count === nodeCount;\n          try {\n            for (var _f = __values(this.tableRows), _g = _f.next(); !_g.done; _g = _f.next()) {\n              var row = _g.value;\n              var cell = row.getChild(i);\n              if (cell) {\n                var child = cell.childNodes[0];\n                var noStretch = child.stretch.dir === 0;\n                if (all || noStretch) {\n                  var w = child.getBBox(noStretch).w;\n                  if (w > W) {\n                    W = w;\n                  }\n                }\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n        try {\n          for (var stretchy_1 = __values(stretchy), stretchy_1_1 = stretchy_1.next(); !stretchy_1_1.done; stretchy_1_1 = stretchy_1.next()) {\n            var child = stretchy_1_1.value;\n            child.coreMO().getStretchedVariant([W]);\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (stretchy_1_1 && !stretchy_1_1.done && (_c = stretchy_1.return)) _c.call(stretchy_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n      }\n    };\n    class_1.prototype.getTableData = function () {\n      if (this.data) {\n        return this.data;\n      }\n      var H = new Array(this.numRows).fill(0);\n      var D = new Array(this.numRows).fill(0);\n      var W = new Array(this.numCols).fill(0);\n      var NH = new Array(this.numRows);\n      var ND = new Array(this.numRows);\n      var LW = [0];\n      var rows = this.tableRows;\n      for (var j = 0; j < rows.length; j++) {\n        var M = 0;\n        var row = rows[j];\n        var align = row.node.attributes.get('rowalign');\n        for (var i = 0; i < row.numCells; i++) {\n          var cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n        NH[j] = H[j];\n        ND[j] = D[j];\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n      var L = LW[0];\n      this.data = {\n        H: H,\n        D: D,\n        W: W,\n        NH: NH,\n        ND: ND,\n        L: L\n      };\n      return this.data;\n    };\n    class_1.prototype.updateHDW = function (cell, i, j, align, H, D, W, M) {\n      var _a = cell.getBBox(),\n        h = _a.h,\n        d = _a.d,\n        w = _a.w;\n      var scale = cell.parent.bbox.rscale;\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n      var m = 0;\n      align = cell.node.attributes.get('rowalign') || align;\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    };\n    class_1.prototype.extendHD = function (i, H, D, M) {\n      var d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    };\n    class_1.prototype.recordPWidthCell = function (cell, i) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    };\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n      var _a = this.getTableData(),\n        H = _a.H,\n        D = _a.D;\n      var height, width;\n      if (this.node.attributes.get('equalrows')) {\n        var HD = this.getEqualRowHeight();\n        height = (0, numeric_js_1.sum)([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = (0, numeric_js_1.sum)(H.concat(D, this.rLines, this.rSpace));\n      }\n      height += 2 * (this.fLine + this.fSpace[1]);\n      var CW = this.getComputedWidths();\n      width = (0, numeric_js_1.sum)(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      var w = this.node.attributes.get('width');\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n      var _b = __read(this.getBBoxHD(height), 2),\n        h = _b[0],\n        d = _b[1];\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n      var _c = __read(this.getBBoxLR(), 2),\n        L = _c[0],\n        R = _c[1];\n      bbox.L = L;\n      bbox.R = R;\n      if (!(0, string_js_1.isPercent)(w)) {\n        this.setColumnPWidths();\n      }\n    };\n    class_1.prototype.setChildPWidths = function (_recompute, cwidth, _clear) {\n      var width = this.node.attributes.get('width');\n      if (!(0, string_js_1.isPercent)(width)) return false;\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n      var _a = this.bbox,\n        w = _a.w,\n        L = _a.L,\n        R = _a.R;\n      var labelInWidth = this.node.attributes.get('data-width-includes-label');\n      var W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      var cols = this.node.attributes.get('equalcolumns') ? Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) : this.getColumnAttributes('columnwidth', 0);\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      var CW = this.getComputedWidths();\n      this.pWidth = (0, numeric_js_1.sum)(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n      this.setColumnPWidths();\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n      return this.pWidth !== w;\n    };\n    class_1.prototype.setColumnPWidths = function () {\n      var e_4, _a;\n      var W = this.cWidths;\n      try {\n        for (var _b = __values(this.pwidthCells), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = __read(_c.value, 2),\n            cell = _d[0],\n            i = _d[1];\n          if (cell.setChildPWidths(false, W[i])) {\n            cell.invalidateBBox();\n            cell.getBBox();\n          }\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    };\n    class_1.prototype.getBBoxHD = function (height) {\n      var _a = __read(this.getAlignmentRow(), 2),\n        align = _a[0],\n        row = _a[1];\n      if (row === null) {\n        var a = this.font.params.axis_height;\n        var h2 = height / 2;\n        var HD = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        var y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    };\n    class_1.prototype.getBBoxLR = function () {\n      if (this.hasLabels) {\n        var attributes = this.node.attributes;\n        var side = attributes.get('side');\n        var _a = __read(this.getPadAlignShift(side), 2),\n          pad = _a[0],\n          align = _a[1];\n        var labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n        return align === 'center' && !labels ? [pad, pad] : side === 'left' ? [pad, 0] : [0, pad];\n      }\n      return [0, 0];\n    };\n    class_1.prototype.getPadAlignShift = function (side) {\n      var L = this.getTableData().L;\n      var sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      var pad = L + sep;\n      var _a = __read(this.styles == null ? ['', ''] : [this.styles.get('padding-left'), this.styles.get('padding-right')], 2),\n        lpad = _a[0],\n        rpad = _a[1];\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n      var _b = __read(this.getAlignShift(), 2),\n        align = _b[0],\n        shift = _b[1];\n      if (align === side) {\n        shift = side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad;\n      }\n      return [pad, align, shift];\n    };\n    class_1.prototype.getAlignShift = function () {\n      return this.isTop ? _super.prototype.getAlignShift.call(this) : [this.container.getChildAlign(this.containerI), 0];\n    };\n    class_1.prototype.getWidth = function () {\n      return this.pWidth || this.getBBox().w;\n    };\n    class_1.prototype.getEqualRowHeight = function () {\n      var _a = this.getTableData(),\n        H = _a.H,\n        D = _a.D;\n      var HD = Array.from(H.keys()).map(function (i) {\n        return H[i] + D[i];\n      });\n      return Math.max.apply(Math, HD);\n    };\n    class_1.prototype.getComputedWidths = function () {\n      var _this = this;\n      var W = this.getTableData().W;\n      var CW = Array.from(W.keys()).map(function (i) {\n        return typeof _this.cWidths[i] === 'number' ? _this.cWidths[i] : W[i];\n      });\n      if (this.node.attributes.get('equalcolumns')) {\n        CW = Array(CW.length).fill((0, numeric_js_1.max)(CW));\n      }\n      return CW;\n    };\n    class_1.prototype.getColumnWidths = function () {\n      var width = this.node.attributes.get('width');\n      if (this.node.attributes.get('equalcolumns')) {\n        return this.getEqualColumns(width);\n      }\n      var swidths = this.getColumnAttributes('columnwidth', 0);\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n      if ((0, string_js_1.isPercent)(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    };\n    class_1.prototype.getEqualColumns = function (width) {\n      var n = Math.max(1, this.numCols);\n      var cwidth;\n      if (width === 'auto') {\n        var W = this.getTableData().W;\n        cwidth = (0, numeric_js_1.max)(W);\n      } else if ((0, string_js_1.isPercent)(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        var w = (0, numeric_js_1.sum)([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n      return Array(this.numCols).fill(cwidth);\n    };\n    class_1.prototype.getColumnWidthsAuto = function (swidths) {\n      var _this = this;\n      return swidths.map(function (x) {\n        if (x === 'auto' || x === 'fit') return null;\n        if ((0, string_js_1.isPercent)(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n    class_1.prototype.getColumnWidthsPercent = function (swidths) {\n      var _this = this;\n      var hasFit = swidths.indexOf('fit') >= 0;\n      var W = (hasFit ? this.getTableData() : {\n        W: null\n      }).W;\n      return Array.from(swidths.keys()).map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return hasFit ? W[i] : null;\n        if ((0, string_js_1.isPercent)(x)) return x;\n        return _this.length2em(x);\n      });\n    };\n    class_1.prototype.getColumnWidthsFixed = function (swidths, width) {\n      var _this = this;\n      var indices = Array.from(swidths.keys());\n      var fit = indices.filter(function (i) {\n        return swidths[i] === 'fit';\n      });\n      var auto = indices.filter(function (i) {\n        return swidths[i] === 'auto';\n      });\n      var n = fit.length || auto.length;\n      var W = (n ? this.getTableData() : {\n        W: null\n      }).W;\n      var cwidth = width - (0, numeric_js_1.sum)([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      var dw = cwidth;\n      indices.forEach(function (i) {\n        var x = swidths[i];\n        dw -= x === 'fit' || x === 'auto' ? W[i] : _this.length2em(x, cwidth);\n      });\n      var fw = n && dw > 0 ? dw / n : 0;\n      return indices.map(function (i) {\n        var x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return _this.length2em(x, cwidth);\n      });\n    };\n    class_1.prototype.getVerticalPosition = function (i, align) {\n      var equal = this.node.attributes.get('equalrows');\n      var _a = this.getTableData(),\n        H = _a.H,\n        D = _a.D;\n      var HD = equal ? this.getEqualRowHeight() : 0;\n      var space = this.getRowHalfSpacing();\n      var y = this.fLine;\n      for (var j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n      var _b = __read(equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]], 2),\n        h = _b[0],\n        d = _b[1];\n      var offset = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      return y;\n    };\n    class_1.prototype.getEmHalfSpacing = function (fspace, space, scale) {\n      if (scale === void 0) {\n        scale = 1;\n      }\n      var fspaceEm = this.em(fspace * scale);\n      var spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    };\n    class_1.prototype.getRowHalfSpacing = function () {\n      var space = this.rSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    };\n    class_1.prototype.getColumnHalfSpacing = function () {\n      var space = this.cSpace.map(function (x) {\n        return x / 2;\n      });\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    };\n    class_1.prototype.getAlignmentRow = function () {\n      var _a = __read((0, string_js_1.split)(this.node.attributes.get('align')), 2),\n        align = _a[0],\n        row = _a[1];\n      if (row == null) return [align, null];\n      var i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    };\n    class_1.prototype.getColumnAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n      var n = this.numCols - i;\n      var columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n      return columns;\n    };\n    class_1.prototype.getRowAttributes = function (name, i) {\n      if (i === void 0) {\n        i = 1;\n      }\n      var n = this.numRows - i;\n      var rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n      return rows;\n    };\n    class_1.prototype.getAttributeArray = function (name) {\n      var value = this.node.attributes.get(name);\n      if (!value) return [this.node.attributes.getDefault(name)];\n      return (0, string_js_1.split)(value);\n    };\n    class_1.prototype.addEm = function (list, n) {\n      var _this = this;\n      if (n === void 0) {\n        n = 1;\n      }\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.em(x / n);\n      });\n    };\n    class_1.prototype.convertLengths = function (list) {\n      var _this = this;\n      if (!list) return null;\n      return list.map(function (x) {\n        return _this.length2em(x);\n      });\n    };\n    return class_1;\n  }(Base);\n}\nexports.CommonMtableMixin = CommonMtableMixin;","map":{"version":3,"mappings":"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","names":["CommonMtableMixin","Base","__extends","_i","args","_this","numCols","tableRows","map","numCells","numRows","childNodes","length","hasLabels","reduce","value","row","node","isKind","findContainer","isTop","container","parent","jax","table","getPercentageWidth","attributes","frame","get","fLine","fSpace","convertLengths","getAttributeArray","cSpace","getColumnAttributes","rSpace","getRowAttributes","cLines","x","rLines","cWidths","getColumnWidths","stretchRows","stretchColumns","Object","class_1","notParent","containerI","childPosition","bbox","pwidth","BBox_js_1","fullWidth","width","equal","HD","getEqualRowHeight","getTableData","H","D","rows","i","hd","stretchChildren","stretchColumn","W","stretchy","cell","getChild","child","stretch","dir","canStretch","push","count","nodeCount","all","noStretch","getBBox","w","coreMO","getStretchedVariant","data","Array","fill","NH","ND","LW","j","M","align","updateHDW","recordPWidthCell","labeled","extendHD","L","h","d","scale","rscale","getProperty","m","pwidthCells","_recompute","height","concat","CW","getComputedWidths","Math","max","length2em","getBBoxHD","getBBoxLR","R","setColumnPWidths","cwidth","_clear","labelInWidth","cols","percent","getColumnWidthsFixed","pWidth","invalidateBBox","setChildPWidths","getAlignmentRow","a","font","params","axis_height","h2","top","center","bottom","baseline","axis","y","getVerticalPosition","side","getPadAlignShift","pad","labels","sep","styles","lpad","rpad","getAlignShift","shift","min","_super","getChildAlign","from","keys","apply","getEqualColumns","swidths","getColumnWidthsAuto","getColumnWidthsPercent","n","hasFit","indexOf","indices","fit","filter","auto","dw","forEach","fw","space","getRowHalfSpacing","offset","fspace","fspaceEm","em","spaceEm","addEm","unshift","parseInt","name","columns","splice","getDefault","list","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/output/common/Wrappers/mtable.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMtable wrapper mixin for the MmlMtable object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonMtr} from './mtr.js';\nimport {CommonMo} from './mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {DIRECTION} from '../FontData.js';\nimport {split, isPercent} from '../../../util/string.js';\nimport {sum, max} from '../../../util/numeric.js';\n\n/*****************************************************************/\n/**\n * The heights, depths, and widths of the rows and columns\n * Plus the natural height and depth (i.e., without the labels)\n * Plus the label column width\n */\nexport type TableData = {\n  H: number[];\n  D: number[];\n  W: number[];\n  NH: number[];\n  ND: number[];\n  L: number;\n};\n\n/**\n * An array of table dimensions\n */\nexport type ColumnWidths = (string | number | null)[];\n\n/*****************************************************************/\n/**\n * The CommonMtable interface\n *\n * @template C   The class for table cells\n * @template R   The class for table rows\n */\nexport interface CommonMtable<C extends AnyWrapper, R extends CommonMtr<C>> extends AnyWrapper {\n\n  /**\n   * The number of columns and rows in the table\n   */\n  numCols: number;\n  numRows: number;\n\n  /**\n   * True if there are labeled rows\n   */\n  hasLabels: boolean;\n\n  /**\n   * True if this mtable is the top element, or in a top-most mrow\n   */\n  isTop: boolean;\n\n  /**\n   * The parent node of this table (skipping non-parents and mrows)\n   *   and the position of the table as a child node\n   */\n  container: AnyWrapper;\n  containerI: number;\n\n  /**\n   * The spacing and line data\n   */\n  frame: boolean;\n  fLine: number;\n  fSpace: number[];\n  cSpace: number[];\n  rSpace: number[];\n  cLines: number[];\n  rLines: number[];\n  cWidths: (number | string)[];\n\n  /**\n   * The bounding box information for the table rows and columns\n   */\n  data: TableData;\n\n  /**\n   * The table cells that have percentage-width content\n   */\n  pwidthCells: [C, number][];\n\n  /**\n   * The full width of a percentage-width table\n   */\n  pWidth: number;\n\n  /**\n   * The rows of the table\n   */\n  readonly tableRows: R[];\n\n  /**\n   * @override\n   */\n  childNodes: R[];\n\n  /**\n   * Find the container and the child position of the table\n   */\n  findContainer(): void;\n\n  /**\n   * If the table has a precentage width or has labels, set the pwidth of the bounding box\n   */\n  getPercentageWidth(): void;\n\n  /**\n   * Stretch the rows to the equal height or natural height\n   */\n  stretchRows(): void;\n\n  /**\n   * Stretch the columns to their proper widths\n   */\n  stretchColumns(): void;\n\n  /**\n   * Handle horizontal stretching within the ith column\n   *\n   * @param {number} i   The column number\n   * @param {number} W   The computed width of the column (or null of not computed)\n   */\n  stretchColumn(i: number, W: number): void;\n\n  /**\n   * Determine the row heights and depths, the column widths,\n   * and the natural width and height of the table.\n   *\n   * @return {TableData}  The dimensions of the rows and columns\n   */\n  getTableData(): TableData;\n\n  /**\n   * @param {C} cell         The cell whose height, depth, and width are to be added into the H, D, W arrays\n   * @param {number} i       The column number for the cell\n   * @param {number} j       The row number for the cell\n   * @param {string} align   The row alignment\n   * @param {number[]} H     The maximum height for each of the rows\n   * @param {number[]} D     The maximum depth for each of the rows\n   * @param {number[]} W     The maximum width for each column\n   * @param {number} M       The current height for items aligned top and bottom\n   * @return {number}        The updated value for M\n   */\n  updateHDW(cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number): number;\n\n  /**\n   * Extend the H and D of a row to cover the maximum height needed by top/bottom aligned items\n   *\n   * @param {number} i     The row whose hight and depth should be adjusted\n   * @param {number[]} H   The row heights\n   * @param {number[]} D   The row depths\n   * @param {number} M     The maximum height of top/bottom aligned items\n   */\n  extendHD(i: number, H: number[], D: number[], M: number): void;\n\n  /**\n   * Set cell widths for columns with percentage width children\n   */\n  setColumnPWidths(): void;\n\n  /**\n   * @param {number} height   The total height of the table\n   * @return {number[]}       The [height, depth] for the aligned table\n   */\n  getBBoxHD(height: number): number[];\n\n  /**\n   * Get bbox left and right amounts to cover labels\n   */\n  getBBoxLR(): number[];\n\n  /**\n   * @param {string} side                 The side for the labels\n   * @return {[number, string, number]}   The padding, alignment, and shift amounts\n   */\n  getPadAlignShift(side: string): [number, string, number];\n\n  /**\n   * @return {number}    The true width of the table (without labels)\n   */\n  getWidth(): number;\n\n  /**\n   * @return {number}   The maximum height of a row\n   */\n  getEqualRowHeight(): number;\n\n  /**\n   * @return {number[]}   The array of computed widths\n   */\n  getComputedWidths(): number[];\n\n  /**\n   * Determine the column widths that can be computed (and need to be set).\n   * The resulting arrays will have numbers for fixed-size arrays,\n   *   strings for percentage sizes that can't be determined now,\n   *   and null for stretchy columns tht will expand to fill the extra space.\n   * Depending on the width specified for the table, different column\n   *  values can be determined.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidths(): ColumnWidths;\n\n  /**\n   * For tables with equal columns, get the proper amount per row.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getEqualColumns(width: string): ColumnWidths;\n\n  /**\n   * For tables with width=\"auto\", auto and fit columns\n   * will end up being natural width, so don't need to\n   * set those explicitly.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsAuto(swidths: string[]): ColumnWidths;\n\n  /**\n   * For tables with percentage widths, let 'fit' columns (or 'auto'\n   * columns if there are not 'fit' ones) will stretch automatically,\n   * but for 'auto' columns (when there are 'fit' ones), set the size\n   * to the natural size of the column.\n   *\n   * @param {string[]} widths  Strings giving the widths\n   * @return {ColumnWidths}    The array of widths\n   */\n  getColumnWidthsPercent(widths: string[]): ColumnWidths;\n\n  /**\n   * For fixed-width tables, compute the column widths of all columns.\n   *\n   * @return {ColumnWidths}  The array of widths\n   */\n  getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths;\n\n  /**\n   * @param {number} i      The row number (starting at 0)\n   * @param {string} align  The alignment on that row\n   * @return {number}       The offest of the alignment position from the top of the table\n   */\n  getVerticalPosition(i: number, align: string): number;\n\n  /**\n   * @param {number} fspace   The frame spacing to use\n   * @param {number[]} space  The array of spacing values to convert to strings\n   * @param {number} scale    A scaling factor to use for the sizes\n   * @return {string[]}       The half-spacing as stings with units of \"em\"\n   *                           with frame spacing at the beginning and end\n   */\n  getEmHalfSpacing(fspace: number, space: number[], scale?: number): string[];\n\n  /**\n   * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n   */\n  getRowHalfSpacing(): number[];\n\n  /**\n   * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n   */\n  getColumnHalfSpacing(): number[];\n\n  /**\n   * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n   */\n  getAlignmentRow(): [string, number | null];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numCols entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table columns (minus 1) by repeating the last entry\n   */\n  getColumnAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @param {number=} i             Return this many fewer than numRows entries\n   * @return {string[]}             The array of values in the given attribute, split at spaces,\n   *                                 padded to the number of table rows (minus 1) by repeating the last entry\n   */\n  getRowAttributes(name: string, i?: number): string[];\n\n  /**\n   * @param {string} name           The name of the attribute to get as an array\n   * @return {string[]}             The array of values in the given attribute, split at spaces\n   *                                 (after leading and trailing spaces are removed, and multiple\n   *                                  spaces have been collapsed to one).\n   */\n  getAttributeArray(name: string): string[];\n\n  /**\n   * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n   *\n   * @param {string[]} list   The array of dimensions (in em's)\n   * @param {nunber=} n       The number to divide each dimension by after converted\n   * @return {string[]}       The array of values with \"em\" added\n   */\n  addEm(list: number[], n?: number): string[];\n\n  /**\n   * Converts an array of dimensions (with arbitrary units) to an array of numbers\n   *   representing the dimensions in units of em's.\n   *\n   * @param {string[]} list   The array of dimensions to be turned into em's\n   * @return {number[]}       The array of values converted to em's\n   */\n  convertLengths(list: string[]): number[];\n\n}\n\n/**\n * Shorthand for the CommonMtable constructor\n */\nexport type MtableConstructor<C extends AnyWrapper, R extends CommonMtr<C>> = Constructor<CommonMtable<C, R>>;\n\n/*****************************************************************/\n/**\n * The CommonMtable wrapper mixin for the MmlMtable object\n *\n * @template C  The table cell class\n * @temlpate R  the table row class\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtableMixin<\n  C extends AnyWrapper,\n  R extends CommonMtr<C>,\n  T extends WrapperConstructor\n>(Base: T): MtableConstructor<C, R> & T {\n\n  return class extends Base {\n\n    /**\n     * The number of columns in the table\n     */\n    public numCols: number = 0;\n    /**\n     * The number of rows in the table\n     */\n    public numRows: number = 0;\n\n    /**\n     * True if there are labeled rows\n     */\n    public hasLabels: boolean;\n\n    /**\n     * True if this mtable is the top element, or in a top-most mrow\n     */\n    public isTop: boolean;\n\n    /**\n     * The parent node of this table (skipping non-parents and mrows)\n     */\n    public container: AnyWrapper;\n    /**\n     * The position of the table as a child node of its container\n     */\n    public containerI: number;\n\n    /**\n     * True if there is a frame\n     */\n    public frame: boolean;\n    /**\n     * The size of the frame line (or 0 if none)\n     */\n    public fLine: number;\n    /**\n     * frame spacing on the left and right\n     */\n    public fSpace: number[];\n    /**\n     * The spacing between columns\n     */\n    public cSpace: number[];\n    /**\n     * The spacing between rows\n     */\n    public rSpace: number[];\n    /**\n     * The width of columns lines (or 0 if no line for the column)\n     */\n    public cLines: number[];\n    /**\n     * The width of row lines (or 0 if no lone for that row)\n     */\n    public rLines: number[];\n    /**\n     * The column widths (or percentages, etc.)\n     */\n    public cWidths: (number | string)[];\n\n    /**\n     * The bounding box information for the table rows and columns\n     */\n    public data: TableData = null;\n\n    /**\n     * The table cells that have percentage-width content\n     */\n    public pwidthCells: [C, number][] = [];\n\n    /**\n     * The full width of a percentage-width table\n     */\n    public pWidth: number = 0;\n\n    /**\n     * @return {R[]}  The rows of the table\n     */\n    get tableRows(): R[] {\n      return this.childNodes;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      //\n      // Determine the number of columns and rows, and whether the table is stretchy\n      //\n      this.numCols = max(this.tableRows.map(row => row.numCells));\n      this.numRows = this.childNodes.length;\n      this.hasLabels = this.childNodes.reduce((value, row) => value || row.node.isKind('mlabeledtr'), false);\n      this.findContainer();\n      this.isTop = !this.container || (this.container.node.isKind('math') && !this.container.parent);\n      if (this.isTop) {\n        this.jax.table = this;\n      }\n      this.getPercentageWidth();\n      //\n      // Get the frame, row, and column parameters\n      //\n      const attributes = this.node.attributes;\n      this.frame = attributes.get('frame') !== 'none';\n      this.fLine = (this.frame && attributes.get('frame') ? .07 : 0);\n      this.fSpace = (this.frame ? this.convertLengths(this.getAttributeArray('framespacing')) : [0, 0]);\n      this.cSpace = this.convertLengths(this.getColumnAttributes('columnspacing'));\n      this.rSpace = this.convertLengths(this.getRowAttributes('rowspacing'));\n      this.cLines = this.getColumnAttributes('columnlines').map(x => (x === 'none' ? 0 : .07));\n      this.rLines = this.getRowAttributes('rowlines').map(x => (x === 'none' ? 0 : .07));\n      this.cWidths = this.getColumnWidths();\n      //\n      // Stretch the rows and columns\n      //\n      this.stretchRows();\n      this.stretchColumns();\n    }\n\n    /**\n     * Find the container and the child position of the table\n     */\n    public findContainer() {\n      let node = this as AnyWrapper;\n      let parent = node.parent as AnyWrapper;\n      while (parent && (parent.node.notParent || parent.node.isKind('mrow'))) {\n        node = parent;\n        parent = parent.parent;\n      }\n      this.container = parent;\n      this.containerI = node.node.childPosition();\n    }\n\n    /**\n     * If the table has a precentage width or has labels, set the pwidth of the bounding box\n     */\n    public getPercentageWidth() {\n      if (this.hasLabels) {\n        this.bbox.pwidth = BBox.fullWidth;\n      } else {\n        const width = this.node.attributes.get('width') as string;\n        if (isPercent(width)) {\n          this.bbox.pwidth = width;\n        }\n      }\n    }\n\n    /**\n     * Stretch the rows to the equal height or natural height\n     */\n    public stretchRows() {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const {H, D} = (equal ? this.getTableData() : {H: [0], D: [0]});\n      const rows = this.tableRows;\n      for (let i = 0; i < this.numRows; i++) {\n        const hd = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : null);\n        rows[i].stretchChildren(hd);\n      }\n    }\n\n    /**\n     * Stretch the columns to their proper widths\n     */\n    public stretchColumns() {\n      for (let i = 0; i < this.numCols; i++) {\n        const width = (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : null);\n        this.stretchColumn(i, width);\n      }\n    }\n\n    /**\n     * Handle horizontal stretching within the ith column\n     *\n     * @param {number} i   The column number\n     * @param {number} W   The computed width of the column (or null of not computed)\n     */\n    public stretchColumn(i: number, W: number) {\n      let stretchy: AnyWrapper[] = [];\n      //\n      //  Locate and count the stretchy children\n      //\n      for (const row of this.tableRows) {\n        const cell = row.getChild(i);\n        if (cell) {\n          const child = cell.childNodes[0];\n          if (child.stretch.dir === DIRECTION.None &&\n              child.canStretch(DIRECTION.Horizontal)) {\n            stretchy.push(child);\n          }\n        }\n      }\n      let count = stretchy.length;\n      let nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (W === null) {\n          W = 0;\n          //\n          //  If all the children are stretchy, find the largest one,\n          //  otherwise, find the width of the non-stretchy children.\n          //\n          let all = (count > 1 && count === nodeCount);\n          for (const row of this.tableRows) {\n            const cell = row.getChild(i);\n            if (cell) {\n              const child = cell.childNodes[0];\n              const noStretch = (child.stretch.dir === DIRECTION.None);\n              if (all || noStretch) {\n                const {w} = child.getBBox(noStretch);\n                if (w > W) {\n                  W = w;\n                }\n              }\n            }\n          }\n        }\n        //\n        //  Stretch the stretchable children\n        //\n        for (const child of stretchy) {\n          (child.coreMO() as CommonMo).getStretchedVariant([W]);\n        }\n      }\n    }\n\n    /******************************************************************/\n\n    /**\n     * Determine the row heights and depths, the column widths,\n     * and the natural width and height of the table.\n     *\n     * @return {TableData}  The dimensions of the rows and columns\n     */\n    public getTableData(): TableData {\n      if (this.data) {\n        return this.data;\n      }\n      const H = new Array(this.numRows).fill(0);\n      const D = new Array(this.numRows).fill(0);\n      const W = new Array(this.numCols).fill(0);\n      const NH = new Array(this.numRows);\n      const ND = new Array(this.numRows);\n      const LW = [0];\n      const rows = this.tableRows;\n      for (let j = 0; j < rows.length; j++) {\n        let M = 0;\n        const row = rows[j];\n        const align = row.node.attributes.get('rowalign') as string;\n        for (let i = 0; i < row.numCells; i++) {\n          const cell = row.getChild(i);\n          M = this.updateHDW(cell, i, j, align, H, D, W, M);\n          this.recordPWidthCell(cell, i);\n        }\n        NH[j] = H[j];\n        ND[j] = D[j];\n        if (row.labeled) {\n          M = this.updateHDW(row.childNodes[0], 0, j, align, H, D, LW, M);\n        }\n        this.extendHD(j, H, D, M);\n        this.extendHD(j, NH, ND, M);\n      }\n      const L = LW[0];\n      this.data = {H, D, W, NH, ND, L};\n      return this.data;\n    }\n\n    /**\n     * @override\n     */\n    public updateHDW(\n      cell: C, i: number, j: number, align: string, H: number[], D: number[], W: number[], M: number\n    ): number {\n      let {h, d, w} = cell.getBBox();\n      const scale = cell.parent.bbox.rscale;\n      if (cell.parent.bbox.rscale !== 1) {\n        h *= scale;\n        d *= scale;\n        w *= scale;\n      }\n      if (this.node.getProperty('useHeight')) {\n        if (h < .75) h = .75;\n        if (d < .25) d = .25;\n      }\n      let m = 0;\n      align = cell.node.attributes.get('rowalign') as string || align;\n      if (align !== 'baseline' && align !== 'axis') {\n        m = h + d;\n        h = d = 0;\n      }\n      if (h > H[j]) H[j] = h;\n      if (d > D[j]) D[j] = d;\n      if (m > M) M = m;\n      if (W && w > W[i]) W[i] = w;\n      return M;\n    }\n\n    /**\n     * @override\n     */\n    public extendHD(i: number, H: number[], D: number[], M: number) {\n      const d = (M - (H[i] + D[i])) / 2;\n      if (d < .00001) return;\n      H[i] += d;\n      D[i] += d;\n    }\n\n    /**\n     * @param {C} cell     The cell to check for percentage widths\n     * @param {number} i   The column index of the cell\n     */\n    public recordPWidthCell(cell: C, i: number) {\n      if (cell.childNodes[0] && cell.childNodes[0].getBBox().pwidth) {\n        this.pwidthCells.push([cell, i]);\n      }\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      const {H, D} = this.getTableData();\n      let height, width;\n      //\n      // For equal rows, use the common height and depth for all rows\n      // Otherwise, use the height and depths for each row separately.\n      // Add in the spacing, line widths, and frame size.\n      //\n      if (this.node.attributes.get('equalrows') as boolean) {\n        const HD = this.getEqualRowHeight();\n        height = sum([].concat(this.rLines, this.rSpace)) + HD * this.numRows;\n      } else {\n        height = sum(H.concat(D, this.rLines, this.rSpace));\n      }\n      height += 2 * (this.fLine + this.fSpace[1]);\n      //\n      //  Get the widths of all columns\n      //\n      const CW = this.getComputedWidths();\n      //\n      //  Get the expected width of the table\n      //\n      width = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      //\n      //  If the table width is not 'auto', determine the specified width\n      //    and pick the larger of the specified and computed widths.\n      //\n      const w = this.node.attributes.get('width') as string;\n      if (w !== 'auto') {\n        width = Math.max(this.length2em(w, 0) + 2 * this.fLine, width);\n      }\n      //\n      //  Return the bounding box information\n      //\n      let [h, d] = this.getBBoxHD(height);\n      bbox.h = h;\n      bbox.d = d;\n      bbox.w = width;\n      let [L, R] = this.getBBoxLR();\n      bbox.L = L;\n      bbox.R = R;\n      //\n      //  Handle cell widths if width is not a percentage\n      //\n      if (!isPercent(w)) {\n        this.setColumnPWidths();\n      }\n    }\n\n    /**\n     * @override\n     */\n    public setChildPWidths(_recompute: boolean, cwidth: number, _clear: boolean) {\n      const width = this.node.attributes.get('width') as string;\n      if (!isPercent(width)) return false;\n      if (!this.hasLabels) {\n        this.bbox.pwidth = '';\n        this.container.bbox.pwidth = '';\n      }\n      const {w, L, R} = this.bbox;\n      const labelInWidth = this.node.attributes.get('data-width-includes-label') as boolean;\n      const W = Math.max(w, this.length2em(width, Math.max(cwidth, L + w + R))) - (labelInWidth ? L + R : 0);\n      const cols = (this.node.attributes.get('equalcolumns') as boolean ?\n                    Array(this.numCols).fill(this.percent(1 / Math.max(1, this.numCols))) :\n                    this.getColumnAttributes('columnwidth', 0));\n      this.cWidths = this.getColumnWidthsFixed(cols, W);\n      const CW = this.getComputedWidths();\n      this.pWidth = sum(CW.concat(this.cLines, this.cSpace)) + 2 * (this.fLine + this.fSpace[0]);\n      if (this.isTop) {\n        this.bbox.w = this.pWidth;\n      }\n      this.setColumnPWidths();\n      if (this.pWidth !== w) {\n        this.parent.invalidateBBox();\n      }\n      return this.pWidth !== w;\n    }\n\n    /**\n     * Finalize any cells that have percentage-width content\n     */\n    public setColumnPWidths() {\n      const W = this.cWidths as number[];\n      for (const [cell, i] of this.pwidthCells) {\n        if (cell.setChildPWidths(false, W[i])) {\n          cell.invalidateBBox();\n          cell.getBBox();\n        }\n      }\n    }\n\n    /**\n     * @param {number} height   The total height of the table\n     * @return {[number, number]}  The [height, depth] for the aligned table\n     */\n    public getBBoxHD(height: number): [number, number] {\n      const [align, row] = this.getAlignmentRow();\n      if (row === null) {\n        const a = this.font.params.axis_height;\n        const h2 = height / 2;\n        const HD: {[key: string]: [number, number]} = {\n          top: [0, height],\n          center: [h2, h2],\n          bottom: [height, 0],\n          baseline: [h2, h2],\n          axis: [h2 + a, h2 - a]\n        };\n        return HD[align] || [h2, h2];\n      } else {\n        const y = this.getVerticalPosition(row, align);\n        return [y, height - y];\n      }\n    }\n\n    /**\n     * Get bbox left and right amounts to cover labels\n     */\n    public getBBoxLR() {\n      if (this.hasLabels) {\n        const attributes = this.node.attributes;\n        const side = attributes.get('side') as string;\n        let [pad, align] = this.getPadAlignShift(side);\n        //\n        // If labels are included in the width,\n        //   remove the frame spacing if there is no frame line (added by multline)\n        //   and use left or right justification rather than centering so that\n        //   there is no extra space reserved for the label on the opposite side,\n        //   (as there usually is to center the equation).\n        //\n        const labels = this.hasLabels && !!attributes.get('data-width-includes-label');\n        if (labels && this.frame && this.fSpace[0]) {\n          pad -= this.fSpace[0];\n        }\n        return (align === 'center' && !labels ? [pad, pad] :\n                side === 'left' ? [pad, 0] : [0, pad]);\n      }\n      return [0, 0];\n    }\n\n    /**\n     * @param {string} side                 The side for the labels\n     * @return {[number, string, number]}   The padding, alignment, and shift amounts\n     */\n    public getPadAlignShift(side: string): [number, string, number] {\n      //\n      //  Make sure labels don't overlap table\n      //\n      const {L} = this.getTableData();\n      const sep = this.length2em(this.node.attributes.get('minlabelspacing'));\n      let pad = L + sep;\n      const [lpad, rpad] = (this.styles == null ? ['', ''] :\n                            [this.styles.get('padding-left'), this.styles.get('padding-right')]);\n      if (lpad || rpad) {\n        pad = Math.max(pad, this.length2em(lpad || '0'), this.length2em(rpad || '0'));\n      }\n      //\n      //  Handle indentation\n      //\n      let [align, shift] = this.getAlignShift();\n      if (align === side) {\n        shift = (side === 'left' ? Math.max(pad, shift) - pad : Math.min(-pad, shift) + pad);\n      }\n      return [pad, align, shift] as [number, string, number];\n    }\n\n    /**\n     * @override\n     */\n    public getAlignShift() {\n      return (this.isTop ? super.getAlignShift() :\n              [this.container.getChildAlign(this.containerI), 0] as [string, number]);\n    }\n\n    /**\n     * @return {number}    The true width of the table (without labels)\n     */\n    public getWidth(): number {\n      return this.pWidth || this.getBBox().w;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @return {number}   The maximum height of a row\n     */\n    public getEqualRowHeight(): number {\n      const {H, D} = this.getTableData();\n      const HD = Array.from(H.keys()).map(i => H[i] + D[i]);\n      return Math.max.apply(Math, HD);\n    }\n\n    /**\n     * @return {number[]}   The array of computed widths\n     */\n    public getComputedWidths(): number[] {\n      const W = this.getTableData().W;\n      let CW = Array.from(W.keys()).map(i => {\n        return (typeof this.cWidths[i] === 'number' ? this.cWidths[i] as number : W[i]);\n      });\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        CW = Array(CW.length).fill(max(CW));\n      }\n      return CW;\n    }\n\n    /**\n     * Determine the column widths that can be computed (and need to be set).\n     * The resulting arrays will have numbers for fixed-size arrays,\n     *   strings for percentage sizes that can't be determined now,\n     *   and null for stretchy columns that will expand to fill the extra space.\n     * Depending on the width specified for the table, different column\n     *  values can be determined.\n     *\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getColumnWidths(): (string | number | null)[] {\n      const width = this.node.attributes.get('width') as string;\n      if (this.node.attributes.get('equalcolumns') as boolean) {\n        return this.getEqualColumns(width);\n      }\n      const swidths = this.getColumnAttributes('columnwidth', 0);\n      if (width === 'auto') {\n        return this.getColumnWidthsAuto(swidths);\n      }\n      if (isPercent(width)) {\n        return this.getColumnWidthsPercent(swidths);\n      }\n      return this.getColumnWidthsFixed(swidths, this.length2em(width));\n    }\n\n    /**\n     * For tables with equal columns, get the proper amount per column.\n     *\n     * @param {string} width   The width attribute of the table\n     * @return {(string|number|null)[]}  The array of widths\n     */\n    public getEqualColumns(width: string): (string | number | null)[] {\n      const n = Math.max(1, this.numCols);\n      let cwidth;\n      if (width === 'auto') {\n        const {W} = this.getTableData();\n        cwidth = max(W);\n      } else if (isPercent(width)) {\n        cwidth = this.percent(1 / n);\n      } else {\n        const w = sum([].concat(this.cLines, this.cSpace)) + 2 * this.fSpace[0];\n        cwidth = Math.max(0, this.length2em(width) - w) / n;\n      }\n      return Array(this.numCols).fill(cwidth);\n    }\n\n    /**\n     * For tables with width=\"auto\", auto and fit columns\n     * will end up being natural width, so don't need to\n     * set those explicitly.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}  The array of widths\n     */\n    public getColumnWidthsAuto(swidths: string[]): ColumnWidths {\n      return swidths.map(x => {\n        if (x === 'auto' || x === 'fit') return null;\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For tables with percentage widths, the 'fit' columns (or 'auto'\n     * columns if there are not 'fit' ones) will stretch automatically,\n     * but for 'auto' columns (when there are 'fit' ones), set the size\n     * to the natural size of the column.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsPercent(swidths: string[]): ColumnWidths {\n      const hasFit = swidths.indexOf('fit') >= 0;\n      const {W} = (hasFit ? this.getTableData() : {W: null});\n      return Array.from(swidths.keys()).map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return null;\n        if (x === 'auto') return (hasFit ? W[i] : null);\n        if (isPercent(x)) return x;\n        return this.length2em(x);\n      });\n    }\n\n    /**\n     * For fixed-width tables, compute the column widths of all columns.\n     *\n     * @param {string[]} swidths   The split and padded columnwidths attribute\n     * @param {number} width       The width of the table\n     * @return {ColumnWidths}      The array of widths\n     */\n    public getColumnWidthsFixed(swidths: string[], width: number): ColumnWidths {\n      //\n      // Get the indices of the fit and auto columns, and the number of fit or auto entries.\n      // If there are fit or auto columns, get the column widths.\n      //\n      const indices = Array.from(swidths.keys());\n      const fit = indices.filter(i => swidths[i] === 'fit');\n      const auto = indices.filter(i => swidths[i] === 'auto');\n      const n = fit.length || auto.length;\n      const {W} = (n ? this.getTableData() : {W: null});\n      //\n      // Determine the space remaining from the fixed width after the\n      //   separation and lines have been removed (cwidth), and\n      //   after the width of the columns have been removed (dw).\n      //\n      const cwidth = width - sum([].concat(this.cLines, this.cSpace)) - 2 * this.fSpace[0];\n      let dw = cwidth;\n      indices.forEach(i => {\n        const x = swidths[i];\n        dw -= (x === 'fit' || x === 'auto' ? W[i] : this.length2em(x, cwidth));\n      });\n      //\n      // Get the amount of extra space per column, or 0 (fw)\n      //\n      const fw = (n && dw > 0 ? dw / n : 0);\n      //\n      // Return the column widths (plus extra space for those that are stretching\n      //\n      return indices.map(i => {\n        const x = swidths[i];\n        if (x === 'fit') return W[i] + fw;\n        if (x === 'auto') return W[i] + (fit.length === 0 ? fw : 0);\n        return this.length2em(x, cwidth);\n      });\n    }\n\n    /**\n     * @param {number} i      The row number (starting at 0)\n     * @param {string} align  The alignment on that row\n     * @return {number}       The offest of the alignment position from the top of the table\n     */\n    public getVerticalPosition(i: number, align: string): number {\n      const equal = this.node.attributes.get('equalrows') as boolean;\n      const {H, D} = this.getTableData();\n      const HD = (equal ? this.getEqualRowHeight() : 0);\n      const space = this.getRowHalfSpacing();\n      //\n      //  Start with frame size and add in spacing, height and depth,\n      //    and line thickness for each row.\n      //\n      let y = this.fLine;\n      for (let j = 0; j < i; j++) {\n        y += space[j] + (equal ? HD : H[j] + D[j]) + space[j + 1] + this.rLines[j];\n      }\n      //\n      //  For equal rows, get updated height and depth\n      //\n      const [h, d] = (equal ? [(HD + H[i] - D[i]) / 2, (HD - H[i] + D[i]) / 2] : [H[i], D[i]]);\n      //\n      //  Add the offset into the specified row\n      //\n      const offset: {[name: string]: number} = {\n        top: 0,\n        center: space[i] + (h + d) / 2,\n        bottom: space[i] + h + d + space[i + 1],\n        baseline: space[i] + h,\n        axis: space[i] + h - .25\n      };\n      y += offset[align] || 0;\n      //\n      //  Return the final result\n      //\n      return y;\n    }\n\n    /******************************************************************/\n\n    /**\n     * @param {number} fspace   The frame spacing to use\n     * @param {number[]} space  The array of spacing values to convert to strings\n     * @param {number} scale    A scaling factor to use for the sizes\n     * @return {string[]}       The half-spacing as stings with units of \"em\"\n     *                           with frame spacing at the beginning and end\n     */\n    public getEmHalfSpacing(fspace: number, space: number[], scale: number = 1): string[] {\n      //\n      //  Get the column spacing values, and add the frame spacing values at the left and right\n      //\n      const fspaceEm = this.em(fspace * scale);\n      const spaceEm = this.addEm(space, 2 / scale);\n      spaceEm.unshift(fspaceEm);\n      spaceEm.push(fspaceEm);\n      return spaceEm;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for rows with frame spacing at the ends\n     */\n    public getRowHalfSpacing(): number[] {\n      const space = this.rSpace.map(x => x / 2);\n      space.unshift(this.fSpace[1]);\n      space.push(this.fSpace[1]);\n      return space;\n    }\n\n    /**\n     * @return {number[]}   The half-spacing for columns with frame spacing at the ends\n     */\n    public getColumnHalfSpacing(): number[] {\n      const space = this.cSpace.map(x => x / 2);\n      space.unshift(this.fSpace[0]);\n      space.push(this.fSpace[0]);\n      return space;\n    }\n\n    /**\n     * @return {[string,number|null]}  The alignment and row number (based at 0) or null\n     */\n    public getAlignmentRow(): [string, number] {\n      const [align, row] = split(this.node.attributes.get('align') as string);\n      if (row == null) return [align, null];\n      let i = parseInt(row);\n      if (i < 0) i += this.numRows + 1;\n      return [align, i < 1 || i > this.numRows ? null : i - 1];\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numCols entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table columns (minus 1) by repeating the last entry\n     */\n    public getColumnAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numCols - i;\n      const columns = this.getAttributeArray(name);\n      if (columns.length === 0) return null;\n      while (columns.length < n) {\n        columns.push(columns[columns.length - 1]);\n      }\n      if (columns.length > n) {\n        columns.splice(n);\n      }\n      return columns;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @param {number=} i             Return this many fewer than numRows entries\n     * @return {string[]}             The array of values in the given attribute, split at spaces,\n     *                                 padded to the number of table rows (minus 1) by repeating the last entry\n     */\n    public getRowAttributes(name: string, i: number = 1): string[] | null {\n      const n = this.numRows - i;\n      const rows = this.getAttributeArray(name);\n      if (rows.length === 0) return null;\n      while (rows.length < n) {\n        rows.push(rows[rows.length - 1]);\n      }\n      if (rows.length > n) {\n        rows.splice(n);\n      }\n      return rows;\n    }\n\n    /**\n     * @param {string} name           The name of the attribute to get as an array\n     * @return {string[]}             The array of values in the given attribute, split at spaces\n     *                                 (after leading and trailing spaces are removed, and multiple\n     *                                  spaces have been collapsed to one).\n     */\n    public getAttributeArray(name: string): string[] {\n      const value = this.node.attributes.get(name) as string;\n      if (!value) return [this.node.attributes.getDefault(name) as string];\n      return split(value);\n    }\n\n    /**\n     * Adds \"em\" to a list of dimensions, after dividing by n (defaults to 1).\n     *\n     * @param {string[]} list   The array of dimensions (in em's)\n     * @param {nunber=} n       The number to divide each dimension by after converted\n     * @return {string[]}       The array of values with \"em\" added\n     */\n    public addEm(list: number[], n: number = 1): string[] | null {\n      if (!list) return null;\n      return list.map(x => this.em(x / n));\n    }\n\n    /**\n     * Converts an array of dimensions (with arbitrary units) to an array of numbers\n     *   representing the dimensions in units of em's.\n     *\n     * @param {string[]} list   The array of dimensions to be turned into em's\n     * @return {number[]}       The array of values converted to em's\n     */\n    public convertLengths(list: string[]): number[] | null {\n      if (!list) return null;\n      return list.map(x => this.length2em(x));\n    }\n  };\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}