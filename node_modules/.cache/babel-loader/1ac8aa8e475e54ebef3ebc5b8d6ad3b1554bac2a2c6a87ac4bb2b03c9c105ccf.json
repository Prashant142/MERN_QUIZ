{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BitFieldClass = exports.BitField = void 0;\nvar BitField = function () {\n  function BitField() {\n    this.bits = 0;\n  }\n  BitField.allocate = function () {\n    var e_1, _a;\n    var names = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      names[_i] = arguments[_i];\n    }\n    try {\n      for (var names_1 = __values(names), names_1_1 = names_1.next(); !names_1_1.done; names_1_1 = names_1.next()) {\n        var name_1 = names_1_1.value;\n        if (this.has(name_1)) {\n          throw new Error('Bit already allocated for ' + name_1);\n        }\n        if (this.next === BitField.MAXBIT) {\n          throw new Error('Maximum number of bits already allocated');\n        }\n        this.names.set(name_1, this.next);\n        this.next <<= 1;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (names_1_1 && !names_1_1.done && (_a = names_1.return)) _a.call(names_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  BitField.has = function (name) {\n    return this.names.has(name);\n  };\n  BitField.prototype.set = function (name) {\n    this.bits |= this.getBit(name);\n  };\n  BitField.prototype.clear = function (name) {\n    this.bits &= ~this.getBit(name);\n  };\n  BitField.prototype.isSet = function (name) {\n    return !!(this.bits & this.getBit(name));\n  };\n  BitField.prototype.reset = function () {\n    this.bits = 0;\n  };\n  BitField.prototype.getBit = function (name) {\n    var bit = this.constructor.names.get(name);\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n    return bit;\n  };\n  BitField.MAXBIT = 1 << 31;\n  BitField.next = 1;\n  BitField.names = new Map();\n  return BitField;\n}();\nexports.BitField = BitField;\nfunction BitFieldClass() {\n  var names = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    names[_i] = arguments[_i];\n  }\n  var Bits = function (_super) {\n    __extends(Bits, _super);\n    function Bits() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Bits;\n  }(BitField);\n  Bits.allocate.apply(Bits, __spreadArray([], __read(names), false));\n  return Bits;\n}\nexports.BitFieldClass = BitFieldClass;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;EAAA;IAoBY,SAAI,GAAW,CAAC;EAmE5B;EA9DgBA,iBAAQ,GAAtB;;IAAuB;SAAA,UAAkB,EAAlBC,qBAAkB,EAAlBA,IAAkB;MAAlBC;;;MACrB,KAAmB,4BAAK,4EAAE;QAArB,IAAMC,MAAI;QACb,IAAI,IAAI,CAACC,GAAG,CAACD,MAAI,CAAC,EAAE;UAClB,MAAM,IAAIE,KAAK,CAAC,4BAA4B,GAAGF,MAAI,CAAC;;QAEtD,IAAI,IAAI,CAACG,IAAI,KAAKN,QAAQ,CAACO,MAAM,EAAE;UACjC,MAAM,IAAIF,KAAK,CAAC,0CAA0C,CAAC;;QAE7D,IAAI,CAACH,KAAK,CAACM,GAAG,CAACL,MAAI,EAAE,IAAI,CAACG,IAAI,CAAC;QAC/B,IAAI,CAACA,IAAI,KAAK,CAAC;;;;;;;;;;;;;EAEnB,CAAC;EAMaN,YAAG,GAAjB,UAAkBS,IAAY;IAC5B,OAAO,IAAI,CAACP,KAAK,CAACE,GAAG,CAACK,IAAI,CAAC;EAC7B,CAAC;EAKMT,sBAAG,GAAV,UAAWS,IAAY;IACrB,IAAI,CAACC,IAAI,IAAI,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC;EAChC,CAAC;EAKMT,wBAAK,GAAZ,UAAaS,IAAY;IACvB,IAAI,CAACC,IAAI,IAAI,CAAC,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC;EACjC,CAAC;EAMMT,wBAAK,GAAZ,UAAaS,IAAY;IACvB,OAAO,CAAC,EAAE,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC,CAAC;EAC1C,CAAC;EAKMT,wBAAK,GAAZ;IACE,IAAI,CAACU,IAAI,GAAG,CAAC;EACf,CAAC;EAMSV,yBAAM,GAAhB,UAAiBS,IAAY;IAC3B,IAAMG,GAAG,GAAI,IAAI,CAACC,WAA+B,CAACX,KAAK,CAACY,GAAG,CAACL,IAAI,CAAC;IACjE,IAAI,CAACG,GAAG,EAAE;MACR,MAAM,IAAIP,KAAK,CAAC,0BAA0B,GAAGI,IAAI,CAAC;;IAEpD,OAAOG,GAAG;EACZ,CAAC;EAhFgBZ,eAAM,GAAG,CAAC,IAAI,EAAE;EAKhBA,aAAI,GAAW,CAAC;EAKhBA,cAAK,GAAwB,IAAIe,GAAG,EAAE;EAwEzD,eAAC;CAAA,EAvFD;AAAaC;AA6Fb,SAAgBC,aAAa;EAAC;OAAA,UAAkB,EAAlBhB,qBAAkB,EAAlBA,IAAkB;IAAlBC;;EAC5B,IAAMgB,IAAI;IAAiBC;IAAd;;IAAwB;IAAA,WAAC;EAAD,CAAC,CAAXnB,QAAQ,CAAG;EACtCkB,IAAI,CAACE,QAAQ,OAAbF,IAAI,2BAAahB,KAAK;EACtB,OAAOgB,IAAI;AACb;AAJAF","names":["BitField","_i","names","name_1","has","Error","next","MAXBIT","set","name","bits","getBit","bit","constructor","get","Map","exports","BitFieldClass","Bits","__extends","allocate"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/util/BitField.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements bit-fields with extendable field names\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nexport class BitField {\n\n  /**\n   * The largest bit available\n   */\n  protected static MAXBIT = 1 << 31;\n\n  /**\n   * The next bit to be allocated\n   */\n  protected static next: number = 1;\n\n  /**\n   * The map of names to bit positions\n   */\n  protected static names: Map<string, number> = new Map();\n\n  /**\n   * The bits that are set\n   */\n  protected bits: number = 0;\n\n  /**\n   * @param {string} names    The names of the bit positions to reserve\n   */\n  public static allocate(...names: string[]) {\n    for (const name of names) {\n      if (this.has(name)) {\n        throw new Error('Bit already allocated for ' + name);\n      }\n      if (this.next === BitField.MAXBIT) {\n        throw new Error('Maximum number of bits already allocated');\n      }\n      this.names.set(name, this.next);\n      this.next <<= 1;\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check for being defined\n   * @return {boolean}      True if the named bit is already allocated\n   */\n  public static has(name: string): boolean {\n    return this.names.has(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to set\n   */\n  public set(name: string) {\n    this.bits |= this.getBit(name);\n  }\n\n  /**\n   * @param {string} name    The name of the bit position to clear\n   */\n  public clear(name: string) {\n    this.bits &= ~this.getBit(name);\n  }\n\n  /**\n   * @param {string} name   The name of the bit to check if set\n   * @return {boolean}      True if the named bit is set\n   */\n  public isSet(name: string): boolean {\n    return !!(this.bits & this.getBit(name));\n  }\n\n  /**\n   * Clear all bits\n   */\n  public reset() {\n    this.bits = 0;\n  }\n\n  /**\n   * @param {string} name   The name whose bit position is needed (error if not defined)\n   * @return {number}       The position of the named bit\n   */\n  protected getBit(name: string): number {\n    const bit = (this.constructor as typeof BitField).names.get(name);\n    if (!bit) {\n      throw new Error('Unknown bit-field name: ' + name);\n    }\n    return bit;\n  }\n\n}\n\n/**\n * @param {string[]} names    The name of the positions to allocate initially\n * @return {typeof AbstractBitField}  The bit-field class with names allocated\n */\nexport function BitFieldClass(...names: string[]): typeof BitField {\n  const Bits = class extends BitField {};\n  Bits.allocate(...names);\n  return Bits;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}