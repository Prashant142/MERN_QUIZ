{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMaction = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar MmlMaction = function (_super) {\n  __extends(MmlMaction, _super);\n  function MmlMaction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlMaction.prototype, \"kind\", {\n    get: function () {\n      return 'maction';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"arity\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"selected\", {\n    get: function () {\n      var selection = this.attributes.get('selection');\n      var i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;\n      return this.childNodes[i] || this.factory.create('mrow');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"isEmbellished\", {\n    get: function () {\n      return this.selected.isEmbellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMaction.prototype, \"isSpacelike\", {\n    get: function () {\n      return this.selected.isSpacelike;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMaction.prototype.core = function () {\n    return this.selected.core();\n  };\n  MmlMaction.prototype.coreMO = function () {\n    return this.selected.coreMO();\n  };\n  MmlMaction.prototype.verifyAttributes = function (options) {\n    _super.prototype.verifyAttributes.call(this, options);\n    if (this.attributes.get('actiontype') !== 'toggle' && this.attributes.getExplicit('selection') !== undefined) {\n      var attributes = this.attributes.getAllAttributes();\n      delete attributes.selection;\n    }\n  };\n  MmlMaction.prototype.setTeXclass = function (prev) {\n    if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {\n      this.childNodes[1].setTeXclass(null);\n    }\n    var selected = this.selected;\n    prev = selected.setTeXclass(prev);\n    this.updateTeXclass(selected);\n    return prev;\n  };\n  MmlMaction.prototype.nextToggleSelection = function () {\n    var selection = Math.max(1, this.attributes.get('selection') + 1);\n    if (selection > this.childNodes.length) {\n      selection = 1;\n    }\n    this.attributes.set('selection', selection);\n  };\n  MmlMaction.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), {\n    actiontype: 'toggle',\n    selection: 1\n  });\n  return MmlMaction;\n}(MmlNode_js_1.AbstractMmlNode);\nexports.MmlMaction = MmlMaction;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAOA;EAAgCA;EAAhC;;EAsGA;EAxFEC,sBAAWC,4BAAI;SAAf;MACE,OAAO,SAAS;IAClB,CAAC;;;;EAMDD,sBAAWC,6BAAK;SAAhB;MACE,OAAO,CAAC;IACV,CAAC;;;;EAKDD,sBAAWC,gCAAQ;SAAnB;MACE,IAAMC,SAAS,GAAG,IAAI,CAACC,UAAU,CAACC,GAAG,CAAC,WAAW,CAAW;MAC5D,IAAMC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,UAAU,CAACC,MAAM,EAAER,SAAS,CAAC,CAAC,GAAG,CAAC;MACtE,OAAO,IAAI,CAACO,UAAU,CAACJ,CAAC,CAAC,IAAI,IAAI,CAACM,OAAO,CAACC,MAAM,CAAC,MAAM,CAAC;IAC1D,CAAC;;;;EAKDZ,sBAAWC,qCAAa;SAAxB;MACE,OAAO,IAAI,CAACY,QAAQ,CAACC,aAAa;IACpC,CAAC;;;;EAKDd,sBAAWC,mCAAW;SAAtB;MACE,OAAO,IAAI,CAACY,QAAQ,CAACE,WAAW;IAClC,CAAC;;;;EAKMd,yBAAI,GAAX;IACE,OAAO,IAAI,CAACY,QAAQ,CAACG,IAAI,EAAE;EAC7B,CAAC;EAKMf,2BAAM,GAAb;IACE,OAAO,IAAI,CAACY,QAAQ,CAACI,MAAM,EAAE;EAC/B,CAAC;EAKShB,qCAAgB,GAA1B,UAA2BiB,OAAqB;IAC9CC,iBAAMC,gBAAgB,YAACF,OAAO,CAAC;IAC/B,IAAI,IAAI,CAACf,UAAU,CAACC,GAAG,CAAC,YAAY,CAAC,KAAK,QAAQ,IAC9C,IAAI,CAACD,UAAU,CAACkB,WAAW,CAAC,WAAW,CAAC,KAAKC,SAAS,EAAE;MAC1D,IAAMnB,UAAU,GAAG,IAAI,CAACA,UAAU,CAACoB,gBAAgB,EAAE;MACrD,OAAOpB,UAAU,CAACD,SAAS;;EAE/B,CAAC;EAQMD,gCAAW,GAAlB,UAAmBuB,IAAa;IAC9B,IAAI,IAAI,CAACrB,UAAU,CAACC,GAAG,CAAC,YAAY,CAAC,KAAK,SAAS,IAAI,IAAI,CAACK,UAAU,CAAC,CAAC,CAAC,EAAE;MACzE,IAAI,CAACA,UAAU,CAAC,CAAC,CAAC,CAACgB,WAAW,CAAC,IAAI,CAAC;;IAEtC,IAAIZ,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5BW,IAAI,GAAGX,QAAQ,CAACY,WAAW,CAACD,IAAI,CAAC;IACjC,IAAI,CAACE,cAAc,CAACb,QAAQ,CAAC;IAC7B,OAAOW,IAAI;EACb,CAAC;EAKMvB,wCAAmB,GAA1B;IACE,IAAIC,SAAS,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAG,IAAI,CAACJ,UAAU,CAACC,GAAG,CAAC,WAAW,CAAY,GAAG,CAAC,CAAC;IAC7E,IAAIF,SAAS,GAAG,IAAI,CAACO,UAAU,CAACC,MAAM,EAAE;MACtCR,SAAS,GAAG,CAAC;;IAEf,IAAI,CAACC,UAAU,CAACwB,GAAG,CAAC,WAAW,EAAEzB,SAAS,CAAC;EAC7C,CAAC;EA/FaD,mBAAQ,yBACjB2B,4BAAe,CAACC,QAAQ;IAC3BC,UAAU,EAAE,QAAQ;IACpB5B,SAAS,EAAE;EAAC;EA8FhB,iBAAC;CAAA,CAtG+B0B,4BAAe;AAAlCG","names":["__extends","Object","MmlMaction","selection","attributes","get","i","Math","max","min","childNodes","length","factory","create","selected","isEmbellished","isSpacelike","core","coreMO","options","_super","verifyAttributes","getExplicit","undefined","getAllAttributes","prev","setTeXclass","updateTeXclass","set","MmlNode_js_1","defaults","actiontype","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/maction.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMaction node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMaction node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMaction extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    actiontype: 'toggle',\n    selection: 1\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'maction';\n  }\n\n  /**\n   * At least one child\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * @return {MmlNode}  The selected child node (or an mrow if none selected)\n   */\n  public get selected(): MmlNode {\n    const selection = this.attributes.get('selection') as number;\n    const i = Math.max(1, Math.min(this.childNodes.length, selection)) - 1;\n    return this.childNodes[i] || this.factory.create('mrow');\n  }\n\n  /**\n   * @override\n   */\n  public get isEmbellished() {\n    return this.selected.isEmbellished;\n  }\n\n  /**\n   * @override\n   */\n  public get isSpacelike() {\n    return this.selected.isSpacelike;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    return this.selected.core();\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    return this.selected.coreMO();\n  }\n\n  /**\n   * @override\n   */\n  protected verifyAttributes(options: PropertyList) {\n    super.verifyAttributes(options);\n    if (this.attributes.get('actiontype') !== 'toggle' &&\n        this.attributes.getExplicit('selection') !== undefined) {\n      const attributes = this.attributes.getAllAttributes();\n      delete attributes.selection;\n    }\n  }\n\n  /**\n   * Get the TeX class from the selceted node\n   * For tooltips, set TeX classes within the tip as a separate math list\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.attributes.get('actiontype') === 'tooltip' && this.childNodes[1]) {\n      this.childNodes[1].setTeXclass(null);\n    }\n    let selected = this.selected;\n    prev = selected.setTeXclass(prev);\n    this.updateTeXclass(selected);\n    return prev;\n  }\n\n  /**\n   * Select the next child for a toggle action\n   */\n  public nextToggleSelection() {\n    let selection = Math.max(1, (this.attributes.get('selection') as number) + 1);\n    if (selection > this.childNodes.length) {\n      selection = 1;\n    }\n    this.attributes.set('selection', selection);\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}