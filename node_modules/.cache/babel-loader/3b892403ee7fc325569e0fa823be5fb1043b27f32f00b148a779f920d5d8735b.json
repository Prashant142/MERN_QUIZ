{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CssStyles = void 0;\nvar CssStyles = function () {\n  function CssStyles(styles) {\n    if (styles === void 0) {\n      styles = null;\n    }\n    this.styles = {};\n    this.addStyles(styles);\n  }\n  Object.defineProperty(CssStyles.prototype, \"cssText\", {\n    get: function () {\n      return this.getStyleString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CssStyles.prototype.addStyles = function (styles) {\n    var e_1, _a;\n    if (!styles) return;\n    try {\n      for (var _b = __values(Object.keys(styles)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var style = _c.value;\n        if (!this.styles[style]) {\n          this.styles[style] = {};\n        }\n        Object.assign(this.styles[style], styles[style]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  CssStyles.prototype.removeStyles = function () {\n    var e_2, _a;\n    var selectors = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      selectors[_i] = arguments[_i];\n    }\n    try {\n      for (var selectors_1 = __values(selectors), selectors_1_1 = selectors_1.next(); !selectors_1_1.done; selectors_1_1 = selectors_1.next()) {\n        var selector = selectors_1_1.value;\n        delete this.styles[selector];\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (selectors_1_1 && !selectors_1_1.done && (_a = selectors_1.return)) _a.call(selectors_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  CssStyles.prototype.clear = function () {\n    this.styles = {};\n  };\n  CssStyles.prototype.getStyleString = function () {\n    return this.getStyleRules().join('\\n\\n');\n  };\n  CssStyles.prototype.getStyleRules = function () {\n    var e_3, _a;\n    var selectors = Object.keys(this.styles);\n    var defs = new Array(selectors.length);\n    var i = 0;\n    try {\n      for (var selectors_2 = __values(selectors), selectors_2_1 = selectors_2.next(); !selectors_2_1.done; selectors_2_1 = selectors_2.next()) {\n        var selector = selectors_2_1.value;\n        defs[i++] = selector + ' {\\n' + this.getStyleDefString(this.styles[selector]) + '\\n}';\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (selectors_2_1 && !selectors_2_1.done && (_a = selectors_2.return)) _a.call(selectors_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return defs;\n  };\n  CssStyles.prototype.getStyleDefString = function (styles) {\n    var e_4, _a;\n    var properties = Object.keys(styles);\n    var values = new Array(properties.length);\n    var i = 0;\n    try {\n      for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {\n        var property = properties_1_1.value;\n        values[i++] = '  ' + property + ': ' + styles[property] + ';';\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    return values.join('\\n');\n  };\n  return CssStyles;\n}();\nexports.CssStyles = CssStyles;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AA0CA;EAiBE,mBAAYA,MAAwB;IAAxB;MAAAA,aAAwB;IAAA;IAb1B,WAAM,GAAc,EAAE;IAc9B,IAAI,CAACC,SAAS,CAACD,MAAM,CAAC;EACxB;EAVAE,sBAAIC,8BAAO;SAAX;MACE,OAAO,IAAI,CAACC,cAAc,EAAE;IAC9B,CAAC;;;;EAaMD,6BAAS,GAAhB,UAAiBH,MAAiB;;IAChC,IAAI,CAACA,MAAM,EAAE;;MACb,KAAoB,wBAAM,CAACK,IAAI,CAACL,MAAM,CAAC,6CAAE;QAApC,IAAMM,KAAK;QACd,IAAI,CAAC,IAAI,CAACN,MAAM,CAACM,KAAK,CAAC,EAAE;UACvB,IAAI,CAACN,MAAM,CAACM,KAAK,CAAC,GAAG,EAAE;;QAEzBJ,MAAM,CAACK,MAAM,CAAC,IAAI,CAACP,MAAM,CAACM,KAAK,CAAC,EAAEN,MAAM,CAACM,KAAK,CAAC,CAAC;;;;;;;;;;;;;EAEpD,CAAC;EAKMH,gCAAY,GAAnB;;IAAoB;SAAA,UAAsB,EAAtBK,qBAAsB,EAAtBA,IAAsB;MAAtBC;;;MAClB,KAAuB,oCAAS,gGAAE;QAA7B,IAAMC,QAAQ;QACjB,OAAO,IAAI,CAACV,MAAM,CAACU,QAAQ,CAAC;;;;;;;;;;;;;EAEhC,CAAC;EAKMP,yBAAK,GAAZ;IACE,IAAI,CAACH,MAAM,GAAG,EAAE;EAClB,CAAC;EAKMG,kCAAc,GAArB;IACE,OAAO,IAAI,CAACQ,aAAa,EAAE,CAACC,IAAI,CAAC,MAAM,CAAC;EAC1C,CAAC;EAKMT,iCAAa,GAApB;;IACE,IAAMM,SAAS,GAAGP,MAAM,CAACG,IAAI,CAAC,IAAI,CAACL,MAAM,CAAC;IAC1C,IAAMa,IAAI,GAAa,IAAIC,KAAK,CAACL,SAAS,CAACM,MAAM,CAAC;IAClD,IAAIC,CAAC,GAAG,CAAC;;MACT,KAAuB,oCAAS,gGAAE;QAA7B,IAAMN,QAAQ;QACjBG,IAAI,CAACG,CAAC,EAAE,CAAC,GAAGN,QAAQ,GAAG,MAAM,GAAG,IAAI,CAACO,iBAAiB,CAAC,IAAI,CAACjB,MAAM,CAACU,QAAQ,CAAC,CAAC,GAAG,KAAK;;;;;;;;;;;;;IAEvF,OAAOG,IAAI;EACb,CAAC;EAMMV,qCAAiB,GAAxB,UAAyBH,MAAiB;;IACxC,IAAMkB,UAAU,GAAGhB,MAAM,CAACG,IAAI,CAACL,MAAM,CAAC;IACtC,IAAMmB,MAAM,GAAa,IAAIL,KAAK,CAACI,UAAU,CAACH,MAAM,CAAC;IACrD,IAAIC,CAAC,GAAG,CAAC;;MACT,KAAuB,sCAAU,qGAAE;QAA9B,IAAMI,QAAQ;QACjBD,MAAM,CAACH,CAAC,EAAE,CAAC,GAAG,IAAI,GAAGI,QAAQ,GAAG,IAAI,GAAGpB,MAAM,CAACoB,QAAQ,CAAC,GAAG,GAAG;;;;;;;;;;;;;IAE/D,OAAOD,MAAM,CAACP,IAAI,CAAC,IAAI,CAAC;EAC1B,CAAC;EAEH,gBAAC;AAAD,CAAC,EApFD;AAAaS","names":["styles","addStyles","Object","CssStyles","getStyleString","keys","style","assign","_i","selectors","selector","getStyleRules","join","defs","Array","length","i","getStyleDefString","properties","values","property","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/util/StyleList.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CssStyles class for handling stylesheets\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n * The data for a selector\n */\nexport type StyleData = {\n  [property: string]: string | number;\n};\n\n/**\n * A list of selectors and their data (basically a stylesheet)\n */\nexport type StyleList = {\n  [selector: string]: StyleData;\n};\n\n/******************************************************************************/\n/**\n * The CssStyles class (for managing a collection of CSS style definitions)\n */\n\nexport class CssStyles {\n  /**\n   * The styles as they currently stand\n   */\n  protected styles: StyleList = {};\n\n  /**\n   * @return {string}  The styles as a CSS string\n   */\n  get cssText(): string {\n    return this.getStyleString();\n  }\n\n  /**\n   * @param {StyleList} styles  The initial styles to use, if any\n   * @constructor\n   */\n  constructor(styles: StyleList = null) {\n    this.addStyles(styles);\n  }\n\n  /**\n   * @param {StyleList} styles  The styles to combine with the existing ones\n   */\n  public addStyles(styles: StyleList) {\n    if (!styles) return;\n    for (const style of Object.keys(styles)) {\n      if (!this.styles[style]) {\n        this.styles[style] = {};\n      }\n      Object.assign(this.styles[style], styles[style]);\n    }\n  }\n\n  /**\n   * @param {string[]} selectors  The selectors for the styles to remove\n   */\n  public removeStyles(...selectors: string[]) {\n    for (const selector of selectors) {\n      delete this.styles[selector];\n    }\n  }\n\n  /**\n   * Clear all the styles\n   */\n  public clear() {\n    this.styles = {};\n  }\n\n  /**\n   * @return {string} The CSS string for the style list\n   */\n  public getStyleString(): string {\n    return this.getStyleRules().join('\\n\\n');\n  }\n\n  /**\n   * @return {string[]}  An array of rule strings for the style list\n   */\n  public getStyleRules(): string[] {\n    const selectors = Object.keys(this.styles);\n    const defs: string[] = new Array(selectors.length);\n    let i = 0;\n    for (const selector of selectors) {\n      defs[i++] = selector + ' {\\n' + this.getStyleDefString(this.styles[selector]) + '\\n}';\n    }\n    return defs;\n  }\n\n  /**\n   * @param {StyleData} styles  The style data to be stringified\n   * @return {string}           The CSS string for the given data\n   */\n  public getStyleDefString(styles: StyleData): string {\n    const properties = Object.keys(styles);\n    const values: string[] = new Array(properties.length);\n    let i = 0;\n    for (const property of properties) {\n      values[i++] = '  ' + property + ': ' + styles[property] + ';';\n    }\n    return values.join('\\n');\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}