{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLAdaptor = void 0;\nvar DOMAdaptor_js_1 = require(\"../core/DOMAdaptor.js\");\nvar HTMLAdaptor = function (_super) {\n  __extends(HTMLAdaptor, _super);\n  function HTMLAdaptor(window) {\n    var _this = _super.call(this, window.document) || this;\n    _this.window = window;\n    _this.parser = new window.DOMParser();\n    return _this;\n  }\n  HTMLAdaptor.prototype.parse = function (text, format) {\n    if (format === void 0) {\n      format = 'text/html';\n    }\n    return this.parser.parseFromString(text, format);\n  };\n  HTMLAdaptor.prototype.create = function (kind, ns) {\n    return ns ? this.document.createElementNS(ns, kind) : this.document.createElement(kind);\n  };\n  HTMLAdaptor.prototype.text = function (text) {\n    return this.document.createTextNode(text);\n  };\n  HTMLAdaptor.prototype.head = function (doc) {\n    return doc.head || doc;\n  };\n  HTMLAdaptor.prototype.body = function (doc) {\n    return doc.body || doc;\n  };\n  HTMLAdaptor.prototype.root = function (doc) {\n    return doc.documentElement || doc;\n  };\n  HTMLAdaptor.prototype.doctype = function (doc) {\n    return doc.doctype ? \"<!DOCTYPE \".concat(doc.doctype.name, \">\") : '';\n  };\n  HTMLAdaptor.prototype.tags = function (node, name, ns) {\n    if (ns === void 0) {\n      ns = null;\n    }\n    var nodes = ns ? node.getElementsByTagNameNS(ns, name) : node.getElementsByTagName(name);\n    return Array.from(nodes);\n  };\n  HTMLAdaptor.prototype.getElements = function (nodes, _document) {\n    var e_1, _a;\n    var containers = [];\n    try {\n      for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {\n        var node = nodes_1_1.value;\n        if (typeof node === 'string') {\n          containers = containers.concat(Array.from(this.document.querySelectorAll(node)));\n        } else if (Array.isArray(node)) {\n          containers = containers.concat(Array.from(node));\n        } else if (node instanceof this.window.NodeList || node instanceof this.window.HTMLCollection) {\n          containers = containers.concat(Array.from(node));\n        } else {\n          containers.push(node);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (nodes_1_1 && !nodes_1_1.done && (_a = nodes_1.return)) _a.call(nodes_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return containers;\n  };\n  HTMLAdaptor.prototype.contains = function (container, node) {\n    return container.contains(node);\n  };\n  HTMLAdaptor.prototype.parent = function (node) {\n    return node.parentNode;\n  };\n  HTMLAdaptor.prototype.append = function (node, child) {\n    return node.appendChild(child);\n  };\n  HTMLAdaptor.prototype.insert = function (nchild, ochild) {\n    return this.parent(ochild).insertBefore(nchild, ochild);\n  };\n  HTMLAdaptor.prototype.remove = function (child) {\n    return this.parent(child).removeChild(child);\n  };\n  HTMLAdaptor.prototype.replace = function (nnode, onode) {\n    return this.parent(onode).replaceChild(nnode, onode);\n  };\n  HTMLAdaptor.prototype.clone = function (node) {\n    return node.cloneNode(true);\n  };\n  HTMLAdaptor.prototype.split = function (node, n) {\n    return node.splitText(n);\n  };\n  HTMLAdaptor.prototype.next = function (node) {\n    return node.nextSibling;\n  };\n  HTMLAdaptor.prototype.previous = function (node) {\n    return node.previousSibling;\n  };\n  HTMLAdaptor.prototype.firstChild = function (node) {\n    return node.firstChild;\n  };\n  HTMLAdaptor.prototype.lastChild = function (node) {\n    return node.lastChild;\n  };\n  HTMLAdaptor.prototype.childNodes = function (node) {\n    return Array.from(node.childNodes);\n  };\n  HTMLAdaptor.prototype.childNode = function (node, i) {\n    return node.childNodes[i];\n  };\n  HTMLAdaptor.prototype.kind = function (node) {\n    var n = node.nodeType;\n    return n === 1 || n === 3 || n === 8 ? node.nodeName.toLowerCase() : '';\n  };\n  HTMLAdaptor.prototype.value = function (node) {\n    return node.nodeValue || '';\n  };\n  HTMLAdaptor.prototype.textContent = function (node) {\n    return node.textContent;\n  };\n  HTMLAdaptor.prototype.innerHTML = function (node) {\n    return node.innerHTML;\n  };\n  HTMLAdaptor.prototype.outerHTML = function (node) {\n    return node.outerHTML;\n  };\n  HTMLAdaptor.prototype.serializeXML = function (node) {\n    var serializer = new this.window.XMLSerializer();\n    return serializer.serializeToString(node);\n  };\n  HTMLAdaptor.prototype.setAttribute = function (node, name, value, ns) {\n    if (ns === void 0) {\n      ns = null;\n    }\n    if (!ns) {\n      return node.setAttribute(name, value);\n    }\n    name = ns.replace(/.*\\//, '') + ':' + name.replace(/^.*:/, '');\n    return node.setAttributeNS(ns, name, value);\n  };\n  HTMLAdaptor.prototype.getAttribute = function (node, name) {\n    return node.getAttribute(name);\n  };\n  HTMLAdaptor.prototype.removeAttribute = function (node, name) {\n    return node.removeAttribute(name);\n  };\n  HTMLAdaptor.prototype.hasAttribute = function (node, name) {\n    return node.hasAttribute(name);\n  };\n  HTMLAdaptor.prototype.allAttributes = function (node) {\n    return Array.from(node.attributes).map(function (x) {\n      return {\n        name: x.name,\n        value: x.value\n      };\n    });\n  };\n  HTMLAdaptor.prototype.addClass = function (node, name) {\n    if (node.classList) {\n      node.classList.add(name);\n    } else {\n      node.className = (node.className + ' ' + name).trim();\n    }\n  };\n  HTMLAdaptor.prototype.removeClass = function (node, name) {\n    if (node.classList) {\n      node.classList.remove(name);\n    } else {\n      node.className = node.className.split(/ /).filter(function (c) {\n        return c !== name;\n      }).join(' ');\n    }\n  };\n  HTMLAdaptor.prototype.hasClass = function (node, name) {\n    if (node.classList) {\n      return node.classList.contains(name);\n    }\n    return node.className.split(/ /).indexOf(name) >= 0;\n  };\n  HTMLAdaptor.prototype.setStyle = function (node, name, value) {\n    node.style[name] = value;\n  };\n  HTMLAdaptor.prototype.getStyle = function (node, name) {\n    return node.style[name];\n  };\n  HTMLAdaptor.prototype.allStyles = function (node) {\n    return node.style.cssText;\n  };\n  HTMLAdaptor.prototype.insertRules = function (node, rules) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(rules.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var rule = _c.value;\n        try {\n          node.sheet.insertRule(rule, 0);\n        } catch (e) {\n          console.warn(\"MathJax: can't insert css rule '\".concat(rule, \"': \").concat(e.message));\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  HTMLAdaptor.prototype.fontSize = function (node) {\n    var style = this.window.getComputedStyle(node);\n    return parseFloat(style.fontSize);\n  };\n  HTMLAdaptor.prototype.fontFamily = function (node) {\n    var style = this.window.getComputedStyle(node);\n    return style.fontFamily || '';\n  };\n  HTMLAdaptor.prototype.nodeSize = function (node, em, local) {\n    if (em === void 0) {\n      em = 1;\n    }\n    if (local === void 0) {\n      local = false;\n    }\n    if (local && node.getBBox) {\n      var _a = node.getBBox(),\n        width = _a.width,\n        height = _a.height;\n      return [width / em, height / em];\n    }\n    return [node.offsetWidth / em, node.offsetHeight / em];\n  };\n  HTMLAdaptor.prototype.nodeBBox = function (node) {\n    var _a = node.getBoundingClientRect(),\n      left = _a.left,\n      right = _a.right,\n      top = _a.top,\n      bottom = _a.bottom;\n    return {\n      left: left,\n      right: right,\n      top: top,\n      bottom: bottom\n    };\n  };\n  return HTMLAdaptor;\n}(DOMAdaptor_js_1.AbstractDOMAdaptor);\nexports.HTMLAdaptor = HTMLAdaptor;","map":{"version":3,"mappings":"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","names":["__extends","window","_super","document","_this","parser","DOMParser","HTMLAdaptor","text","format","parseFromString","kind","ns","createElementNS","createElement","createTextNode","doc","head","body","documentElement","doctype","name","node","nodes","getElementsByTagNameNS","getElementsByTagName","Array","from","_document","containers","concat","querySelectorAll","isArray","NodeList","HTMLCollection","push","container","contains","parentNode","child","appendChild","nchild","ochild","parent","insertBefore","removeChild","nnode","onode","replaceChild","cloneNode","n","splitText","nextSibling","previousSibling","firstChild","lastChild","childNodes","i","nodeType","nodeName","toLowerCase","nodeValue","textContent","innerHTML","outerHTML","serializer","XMLSerializer","serializeToString","value","setAttribute","replace","setAttributeNS","getAttribute","removeAttribute","hasAttribute","attributes","map","x","classList","add","className","trim","remove","split","filter","c","join","indexOf","style","cssText","rules","reverse","rule","sheet","insertRule","e","console","warn","message","getComputedStyle","parseFloat","fontSize","fontFamily","em","local","getBBox","width","height","offsetWidth","offsetHeight","getBoundingClientRect","left","right","top","bottom","DOMAdaptor_js_1","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/adaptors/HTMLAdaptor.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTML DOM adaptor\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {OptionList} from '../util/Options.js';\nimport {AttributeData, AbstractDOMAdaptor, DOMAdaptor, PageBBox} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Document\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinDocument<N, T> {\n  documentElement: N;\n  head: N;\n  body: N;\n  title: string;\n  doctype: {name: string};\n  /* tslint:disable:jsdoc-require */\n  createElement(kind: string): N;\n  createElementNS(ns: string, kind: string): N;\n  createTextNode(text: string): T;\n  querySelectorAll(selector: string): ArrayLike<N>;\n  /* tslint:enable */\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for an HTML Element\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinHTMLElement<N, T> {\n  nodeType: number;\n  nodeName: string;\n  nodeValue: string;\n  textContent: string;\n  innerHTML: string;\n  outerHTML: string;\n  parentNode: N | Node;\n  nextSibling: N | T | Node;\n  previousSibling: N | T | Node;\n  offsetWidth: number;\n  offsetHeight: number;\n\n  attributes: AttributeData[] | NamedNodeMap;\n  className: string;\n  classList: DOMTokenList;\n  style: OptionList;\n  sheet?: {insertRule: (rule: string, index?: number) => void};\n\n  childNodes: (N | T)[] | NodeList;\n  firstChild: N | T | Node;\n  lastChild: N | T | Node;\n  /* tslint:disable:jsdoc-require */\n  getElementsByTagName(name: string): N[] | HTMLCollectionOf<Element>;\n  getElementsByTagNameNS(ns: string, name: string): N[] | HTMLCollectionOf<Element>;\n  contains(child: N | T): boolean;\n  appendChild(child: N | T): N | T | Node;\n  removeChild(child: N | T): N | T  | Node;\n  replaceChild(nnode: N | T, onode: N | T): N | T  | Node;\n  insertBefore(nchild: N | T, ochild: N | T): void;\n  cloneNode(deep: boolean): N | Node;\n  setAttribute(name: string, value: string): void;\n  setAttributeNS(ns: string, name: string, value: string): void;\n  getAttribute(name: string): string;\n  removeAttribute(name: string): void;\n  hasAttribute(name: string): boolean;\n  getBoundingClientRect(): Object;\n  getBBox?(): {x: number, y: number, width: number, height: number};\n  /* tslint:endable */\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Text element\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport interface MinText<N, T> {\n  nodeType: number;\n  nodeName: string;\n  nodeValue: string;\n  parentNode: N | Node;\n  nextSibling: N | T | Node;\n  previousSibling: N | T | Node;\n  splitText(n: number): T;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a DOMParser\n *\n * @template D  The Document class\n */\nexport interface MinDOMParser<D> {\n  parseFromString(text: string, format?: string): D;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a DOMParser\n *\n * @template N  The HTMLElement node class\n */\nexport interface MinXMLSerializer<N> {\n  serializeToString(node: N): string;\n}\n\n/*****************************************************************/\n/**\n * The minimum fields needed for a Window\n *\n * @template N  The HTMLElement node class\n * @template D  The Document class\n */\nexport interface MinWindow<N, D> {\n  document: D;\n  DOMParser: {\n    new(): MinDOMParser<D>\n  };\n  XMLSerializer: {\n    new(): MinXMLSerializer<N>;\n  };\n  NodeList: any;\n  HTMLCollection: any;\n  HTMLElement: any;\n  DocumentFragment: any;\n  Document: any;\n  getComputedStyle(node: N): any;\n}\n\n/*****************************************************************/\n/**\n * The minimum needed for an HTML Adaptor\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MinHTMLAdaptor<N, T, D> extends DOMAdaptor<N, T, D> {\n  window: MinWindow<N, D>;\n}\n\n/*****************************************************************/\n/**\n *  Abstract HTMLAdaptor class for manipulating HTML elements\n *  (subclass of AbstractDOMAdaptor)\n *\n *  N = HTMLElement node class\n *  T = Text node class\n *  D = Document class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLAdaptor<N extends MinHTMLElement<N, T>, T extends MinText<N, T>, D extends MinDocument<N, T>> extends\nAbstractDOMAdaptor<N, T, D> implements MinHTMLAdaptor<N, T, D> {\n  /**\n   * The window object for this adaptor\n   */\n  public window: MinWindow<N, D>;\n\n  /**\n   * The DOMParser used to parse a string into a DOM tree\n   */\n  public parser: MinDOMParser<D>;\n\n  /**\n   * @override\n   * @constructor\n   */\n  constructor(window: MinWindow<N, D>) {\n    super(window.document);\n    this.window = window;\n    this.parser = new (window.DOMParser as any)();\n  }\n\n  /**\n   * @override\n   */\n  public parse(text: string, format: string = 'text/html') {\n    return this.parser.parseFromString(text, format);\n  }\n\n  /**\n   * @override\n   */\n  protected create(kind: string, ns?: string) {\n    return (ns ?\n            this.document.createElementNS(ns, kind) :\n            this.document.createElement(kind));\n  }\n\n  /**\n   * @override\n   */\n  public text(text: string) {\n    return this.document.createTextNode(text);\n  }\n\n  /**\n   * @override\n   */\n  public head(doc: D) {\n    return doc.head || (doc as any as N);\n  }\n\n  /**\n   * @override\n   */\n  public body(doc: D) {\n    return doc.body || (doc as any as N);\n  }\n\n  /**\n   * @override\n   */\n  public root(doc: D) {\n    return doc.documentElement || (doc as any as N);\n  }\n\n  /**\n   * @override\n   */\n  public doctype(doc: D) {\n    return (doc.doctype ? `<!DOCTYPE ${doc.doctype.name}>` : '');\n  }\n\n  /**\n   * @override\n   */\n  public tags(node: N, name: string, ns: string = null) {\n    let nodes = (ns ? node.getElementsByTagNameNS(ns, name) : node.getElementsByTagName(name));\n    return Array.from(nodes as N[]) as N[];\n  }\n\n  /**\n   * @override\n   */\n  public getElements(nodes: (string | N | N[])[], _document: D) {\n    let containers: N[] = [];\n    for (const node of nodes) {\n      if (typeof(node) === 'string') {\n        containers = containers.concat(Array.from(this.document.querySelectorAll(node)));\n      } else if (Array.isArray(node)) {\n        containers = containers.concat(Array.from(node) as N[]);\n      } else if (node instanceof this.window.NodeList || node instanceof this.window.HTMLCollection) {\n        containers = containers.concat(Array.from(node as any as N[]));\n      } else {\n        containers.push(node);\n      }\n    }\n    return containers;\n  }\n\n  /**\n   * @override\n   */\n  public contains(container: N, node: N | T) {\n    return container.contains(node);\n  }\n\n  /**\n   * @override\n   */\n  public parent(node: N | T) {\n    return node.parentNode as N;\n  }\n\n  /**\n   * @override\n   */\n  public append(node: N, child: N | T) {\n    return node.appendChild(child) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public insert(nchild: N | T, ochild: N | T) {\n    return this.parent(ochild).insertBefore(nchild, ochild);\n  }\n\n  /**\n   * @override\n   */\n  public remove(child: N | T) {\n    return this.parent(child).removeChild(child) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public replace(nnode: N | T, onode: N | T) {\n    return this.parent(onode).replaceChild(nnode, onode) as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public clone(node: N) {\n    return node.cloneNode(true) as N;\n  }\n\n  /**\n   * @override\n   */\n  public split(node: T, n: number) {\n    return node.splitText(n);\n  }\n\n  /**\n   * @override\n   */\n  public next(node: N | T) {\n    return node.nextSibling as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public previous(node: N | T) {\n    return node.previousSibling as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public firstChild(node: N) {\n    return node.firstChild as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public lastChild(node: N) {\n    return node.lastChild as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public childNodes(node: N) {\n    return Array.from(node.childNodes as (N | T)[]);\n  }\n\n  /**\n   * @override\n   */\n  public childNode(node: N, i: number) {\n    return node.childNodes[i] as N | T;\n  }\n\n  /**\n   * @override\n   */\n  public kind(node: N | T) {\n    const n = node.nodeType;\n    return (n === 1 || n === 3 || n === 8 ? node.nodeName.toLowerCase() : '');\n  }\n\n  /**\n   * @override\n   */\n  public value(node: N | T) {\n    return node.nodeValue || '';\n  }\n\n  /**\n   * @override\n   */\n  public textContent(node: N) {\n    return node.textContent;\n  }\n\n  /**\n   * @override\n   */\n  public innerHTML(node: N) {\n    return node.innerHTML;\n  }\n\n  /**\n   * @override\n   */\n  public outerHTML(node: N) {\n    return node.outerHTML;\n  }\n\n  public serializeXML(node: N) {\n    const serializer = new this.window.XMLSerializer();\n    return serializer.serializeToString(node) as string;\n  }\n\n  /**\n   * @override\n   */\n  public setAttribute(node: N, name: string, value: string, ns: string = null) {\n    if (!ns) {\n      return node.setAttribute(name, value);\n    }\n    name = ns.replace(/.*\\//, '') + ':' + name.replace(/^.*:/, '');\n    return node.setAttributeNS(ns, name, value);\n  }\n\n  /**\n   * @override\n   */\n  public getAttribute(node: N, name: string) {\n    return node.getAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public removeAttribute(node: N, name: string) {\n    return node.removeAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public hasAttribute(node: N, name: string) {\n    return node.hasAttribute(name);\n  }\n\n  /**\n   * @override\n   */\n  public allAttributes(node: N) {\n    return Array.from(node.attributes).map(\n      (x: AttributeData) => {\n        return {name: x.name, value: x.value} as AttributeData;\n      }\n    );\n  }\n\n  /**\n   * @override\n   */\n  public addClass(node: N, name: string) {\n    if (node.classList) {\n      node.classList.add(name);\n    } else {\n      node.className = (node.className + ' ' + name).trim();\n    }\n  }\n\n  /**\n   * @override\n   */\n  public removeClass(node: N, name: string) {\n    if (node.classList) {\n      node.classList.remove(name);\n    } else {\n      node.className = node.className.split(/ /).filter((c) => c !== name).join(' ');\n    }\n  }\n\n  /**\n   * @override\n   */\n  public hasClass(node: N, name: string) {\n    if (node.classList) {\n      return node.classList.contains(name);\n    }\n    return node.className.split(/ /).indexOf(name) >= 0;\n  }\n\n  /**\n   * @override\n   */\n  public setStyle(node: N, name: string, value: string) {\n    (node.style as OptionList)[name] = value;\n  }\n\n  /**\n   * @override\n   */\n  public getStyle(node: N, name: string) {\n    return (node.style as OptionList)[name];\n  }\n\n  /**\n   * @override\n   */\n  public allStyles(node: N) {\n    return node.style.cssText;\n  }\n\n  /**\n   * @override\n   */\n  public insertRules(node: N, rules: string[]) {\n    for (const rule of rules.reverse()) {\n      try {\n        node.sheet.insertRule(rule, 0);\n      } catch (e) {\n        console.warn(`MathJax: can't insert css rule '${rule}': ${e.message}`);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  public fontSize(node: N) {\n    const style = this.window.getComputedStyle(node);\n    return parseFloat(style.fontSize);\n  }\n\n  /**\n   * @override\n   */\n  public fontFamily(node: N) {\n    const style = this.window.getComputedStyle(node);\n    return style.fontFamily || '';\n  }\n\n  /**\n   * @override\n   */\n  public nodeSize(node: N, em: number = 1, local: boolean = false) {\n    if (local && node.getBBox) {\n      let {width, height} = node.getBBox();\n      return [width / em , height / em] as [number, number];\n    }\n    return [node.offsetWidth / em, node.offsetHeight / em] as [number, number];\n  }\n\n  /**\n   * @override\n   */\n  public nodeBBox(node: N) {\n    const {left, right, top, bottom} = node.getBoundingClientRect() as PageBBox;\n    return {left, right, top, bottom};\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}