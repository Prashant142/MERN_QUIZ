{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindTeX = void 0;\nvar FindMath_js_1 = require(\"../../core/FindMath.js\");\nvar string_js_1 = require(\"../../util/string.js\");\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\nvar FindTeX = function (_super) {\n  __extends(FindTeX, _super);\n  function FindTeX(options) {\n    var _this = _super.call(this, options) || this;\n    _this.getPatterns();\n    return _this;\n  }\n  FindTeX.prototype.getPatterns = function () {\n    var _this = this;\n    var options = this.options;\n    var starts = [],\n      parts = [],\n      subparts = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    var i = 1;\n    options['inlineMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, false);\n    });\n    options['displayMath'].forEach(function (delims) {\n      return _this.addPattern(starts, delims, true);\n    });\n    if (starts.length) {\n      parts.push(starts.sort(string_js_1.sortLength).join('|'));\n    }\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = parts.length > 0;\n  };\n  FindTeX.prototype.addPattern = function (starts, delims, display) {\n    var _a = __read(delims, 2),\n      open = _a[0],\n      close = _a[1];\n    starts.push((0, string_js_1.quotePattern)(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  };\n  FindTeX.prototype.endPattern = function (end, endp) {\n    return new RegExp((endp || (0, string_js_1.quotePattern)(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  };\n  FindTeX.prototype.findEnd = function (text, n, start, end) {\n    var _a = __read(end, 3),\n      close = _a[0],\n      display = _a[1],\n      pattern = _a[2];\n    var i = pattern.lastIndex = start.index + start[0].length;\n    var match,\n      braces = 0;\n    while (match = pattern.exec(text)) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return (0, MathItem_js_1.protoItem)(start[0], text.substr(i, match.index - i), match[0], n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n    return null;\n  };\n  FindTeX.prototype.findMathInString = function (math, n, text) {\n    var start, match;\n    this.start.lastIndex = 0;\n    while (start = this.start.exec(text)) {\n      if (start[this.env] !== undefined && this.env) {\n        var end = '\\\\\\\\end\\\\s*(\\\\{' + (0, string_js_1.quotePattern)(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        var math_1 = start[this.sub];\n        var end = start.index + start[this.sub].length;\n        if (math_1.length === 2) {\n          match = (0, MathItem_js_1.protoItem)('', math_1.substr(1), '', n, start.index, end);\n        } else {\n          match = (0, MathItem_js_1.protoItem)('', math_1, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  };\n  FindTeX.prototype.findMath = function (strings) {\n    var math = [];\n    if (this.hasPatterns) {\n      for (var i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n    return math;\n  };\n  FindTeX.OPTIONS = {\n    inlineMath: [['\\\\(', '\\\\)']],\n    displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n    processEscapes: true,\n    processEnvironments: true,\n    processRefs: true\n  };\n  return FindTeX;\n}(FindMath_js_1.AbstractFindMath);\nexports.FindTeX = FindTeX;","map":{"version":3,"mappings":"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","names":["__extends","options","_super","_this","getPatterns","FindTeX","starts","parts","subparts","end","env","sub","i","forEach","delims","addPattern","length","push","sort","string_js_1","join","start","RegExp","hasPatterns","display","open","close","endPattern","endp","text","n","pattern","lastIndex","index","match","braces","exec","substr","math","undefined","findEnd","math_1","strings","m","findMathInString","inlineMath","displayMath","processEscapes","processEnvironments","processRefs","FindMath_js_1","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/input/tex/FindTeX.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the TeX version of the FindMath object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractFindMath} from '../../core/FindMath.js';\nimport {OptionList} from '../../util/Options.js';\nimport {sortLength, quotePattern} from '../../util/string.js';\nimport {ProtoItem, protoItem} from '../../core/MathItem.js';\n\n/**\n * Shorthand types for data about end delimiters and delimiter pairs\n */\nexport type EndItem = [string, boolean, RegExp];\nexport type Delims = [string, string];\n\n/*****************************************************************/\n/*\n *  Implements the FindTeX class (extends AbstractFindMath)\n *\n *  Locates TeX expressions within strings\n */\n\n/*\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class FindTeX<N, T, D> extends AbstractFindMath<N, T, D> {\n\n  /**\n   * @type {OptionList}\n   */\n  public static OPTIONS: OptionList = {\n    inlineMath: [              // The start/end delimiter pairs for in-line math\n      //  ['$', '$'],              //  (comment out any you don't want, or add your own, but\n      ['\\\\(', '\\\\)']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    displayMath: [             // The start/end delimiter pairs for display math\n      ['$$', '$$'],            //  (comment out any you don't want, or add your own, but\n      ['\\\\[', '\\\\]']           //  be sure that you don't have an extra comma at the end)\n    ],\n\n    processEscapes: true,      // set to true to allow \\$ to produce a dollar without\n    //   starting in-line math mode\n    processEnvironments: true, // set to true to process \\begin{xxx}...\\end{xxx} outside\n    //   of math mode, false to prevent that\n    processRefs: true,         // set to true to process \\ref{...} outside of math mode\n  };\n\n  /**\n   * The regular expression for any starting delimiter\n   */\n  protected start: RegExp;\n\n  /**\n   * The end-delimiter data keyed to the opening delimiter string\n   */\n  protected end: {[name: string]: EndItem};\n\n  /**\n   * False if the configuration has no delimiters (so search can be skipped), true otherwise\n   */\n  protected hasPatterns: boolean;\n\n  /**\n   * The index of the \\begin...\\end pattern in the regex match array\n   */\n  protected env: number;\n\n  /**\n   * The index of the \\ref and escaped character patters in the regex match array\n   */\n  protected sub: number;\n\n  /**\n   * @override\n   */\n  constructor(options: OptionList) {\n    super(options);\n    this.getPatterns();\n  }\n\n  /**\n   * Create the patterns needed for searching the strings for TeX\n   *   based on the configuration options\n   */\n  protected getPatterns() {\n    let options = this.options;\n    let starts: string[] = [], parts: string[] = [], subparts: string[] = [];\n    this.end = {};\n    this.env = this.sub = 0;\n    let i = 1;\n    options['inlineMath'].forEach((delims: Delims) => this.addPattern(starts, delims, false));\n    options['displayMath'].forEach((delims: Delims) => this.addPattern(starts, delims, true));\n    if (starts.length) {\n      parts.push(starts.sort(sortLength).join('|'));\n    }\n    if (options['processEnvironments']) {\n      parts.push('\\\\\\\\begin\\\\s*\\\\{([^}]*)\\\\}');\n      this.env = i;\n      i++;\n    }\n    if (options['processEscapes']) {\n      subparts.push('\\\\\\\\([\\\\\\\\$])');\n    }\n    if (options['processRefs']) {\n      subparts.push('(\\\\\\\\(?:eq)?ref\\\\s*\\\\{[^}]*\\\\})');\n    }\n    if (subparts.length) {\n      parts.push('(' + subparts.join('|') + ')');\n      this.sub = i;\n    }\n    this.start = new RegExp(parts.join('|'), 'g');\n    this.hasPatterns = (parts.length > 0);\n  }\n\n  /**\n   * Add the needed patterns for a pair of delimiters\n   *\n   * @param {string[]} starts  Array of starting delimiter strings\n   * @param {Delims} delims    Array of delimiter strings, as [start, end]\n   * @param {boolean} display  True if the delimiters are for display mode\n   */\n  protected addPattern(starts: string[], delims: Delims, display: boolean) {\n    let [open, close] = delims;\n    starts.push(quotePattern(open));\n    this.end[open] = [close, display, this.endPattern(close)];\n  }\n\n  /**\n   * Create the pattern for a close delimiter\n   *\n   * @param {string} end   The end delimiter text\n   * @param {string} endp  The end delimiter pattern (overrides the literal end pattern)\n   * @return {RegExp}      The regular expression for the end delimiter\n   */\n  protected endPattern(end: string, endp?: string): RegExp {\n    return new RegExp((endp || quotePattern(end)) + '|\\\\\\\\(?:[a-zA-Z]|.)|[{}]', 'g');\n  }\n\n  /**\n   * Search for the end delimiter given the start delimiter,\n   *   skipping braced groups, and control sequences that aren't\n   *   the close delimiter.\n   *\n   * @param {string} text            The string being searched for the end delimiter\n   * @param {number} n               The index of the string being searched\n   * @param {RegExpExecArray} start  The result array from the start-delimiter search\n   * @param {EndItem} end            The end-delimiter data corresponding to the start delimiter\n   * @return {ProtoItem<N,T>}        The proto math item for the math, if found\n   */\n  protected findEnd(text: string, n: number, start: RegExpExecArray, end: EndItem): ProtoItem<N, T> {\n    let [close, display, pattern] = end;\n    let i = pattern.lastIndex = start.index + start[0].length;\n    let match: RegExpExecArray, braces: number = 0;\n    while ((match = pattern.exec(text))) {\n      if ((match[1] || match[0]) === close && braces === 0) {\n        return protoItem<N, T>(start[0], text.substr(i, match.index - i), match[0],\n                               n, start.index, match.index + match[0].length, display);\n      } else if (match[0] === '{') {\n        braces++;\n      } else if (match[0] === '}' && braces) {\n        braces--;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Search a string for math delimited by one of the delimiter pairs,\n   *   or by \\begin{env}...\\end{env}, or \\eqref{...}, \\ref{...}, \\\\, or \\$.\n   *\n   * @param {ProtoItem[]} math  The array of proto math items located so far\n   * @param {number} n          The index of the string being searched\n   * @param {string} text       The string being searched\n   */\n  protected findMathInString(math: ProtoItem<N, T>[], n: number, text: string) {\n    let start, match;\n    this.start.lastIndex = 0;\n    while ((start = this.start.exec(text))) {\n      if (start[this.env] !== undefined && this.env) {\n        let end = '\\\\\\\\end\\\\s*(\\\\{' + quotePattern(start[this.env]) + '\\\\})';\n        match = this.findEnd(text, n, start, ['{' + start[this.env] + '}', true, this.endPattern(null, end)]);\n        if (match) {\n          match.math = match.open + match.math + match.close;\n          match.open = match.close = '';\n        }\n      } else if (start[this.sub] !== undefined && this.sub) {\n        let math = start[this.sub];\n        let end = start.index + start[this.sub].length;\n        if (math.length === 2) {\n          match = protoItem<N, T>('', math.substr(1), '', n, start.index, end);\n        } else {\n          match = protoItem<N, T>('', math, '', n, start.index, end, false);\n        }\n      } else {\n        match = this.findEnd(text, n, start, this.end[start[0]]);\n      }\n      if (match) {\n        math.push(match);\n        this.start.lastIndex = match.end.n;\n      }\n    }\n  }\n\n  /**\n   * Search for math in an array of strings and return an array of matches.\n   *\n   * @override\n   */\n  public findMath(strings: string[]) {\n    let math: ProtoItem<N, T>[] = [];\n    if (this.hasPatterns) {\n      for (let i = 0, m = strings.length; i < m; i++) {\n        this.findMathInString(math, i, strings[i]);\n      }\n    }\n    return math;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}