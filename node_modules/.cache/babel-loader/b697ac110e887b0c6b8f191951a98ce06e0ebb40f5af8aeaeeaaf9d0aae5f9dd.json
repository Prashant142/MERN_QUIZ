{"ast":null,"code":"\"use strict\";\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinkedList = exports.ListItem = exports.END = void 0;\nexports.END = Symbol();\nvar ListItem = function () {\n  function ListItem(data) {\n    if (data === void 0) {\n      data = null;\n    }\n    this.next = null;\n    this.prev = null;\n    this.data = data;\n  }\n  return ListItem;\n}();\nexports.ListItem = ListItem;\nvar LinkedList = function () {\n  function LinkedList() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this.list = new ListItem(exports.END);\n    this.list.next = this.list.prev = this.list;\n    this.push.apply(this, __spreadArray([], __read(args), false));\n  }\n  LinkedList.prototype.isBefore = function (a, b) {\n    return a < b;\n  };\n  LinkedList.prototype.push = function () {\n    var e_1, _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    try {\n      for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {\n        var data = args_1_1.value;\n        var item = new ListItem(data);\n        item.next = this.list;\n        item.prev = this.list.prev;\n        this.list.prev = item;\n        item.prev.next = item;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return this;\n  };\n  LinkedList.prototype.pop = function () {\n    var item = this.list.prev;\n    if (item.data === exports.END) {\n      return null;\n    }\n    this.list.prev = item.prev;\n    item.prev.next = this.list;\n    item.next = item.prev = null;\n    return item.data;\n  };\n  LinkedList.prototype.unshift = function () {\n    var e_2, _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    try {\n      for (var _b = __values(args.slice(0).reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var data = _c.value;\n        var item = new ListItem(data);\n        item.next = this.list.next;\n        item.prev = this.list;\n        this.list.next = item;\n        item.next.prev = item;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return this;\n  };\n  LinkedList.prototype.shift = function () {\n    var item = this.list.next;\n    if (item.data === exports.END) {\n      return null;\n    }\n    this.list.next = item.next;\n    item.next.prev = this.list;\n    item.next = item.prev = null;\n    return item.data;\n  };\n  LinkedList.prototype.remove = function () {\n    var e_3, _a;\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      items[_i] = arguments[_i];\n    }\n    var map = new Map();\n    try {\n      for (var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n        var item_1 = items_1_1.value;\n        map.set(item_1, true);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    var item = this.list.next;\n    while (item.data !== exports.END) {\n      var next = item.next;\n      if (map.has(item.data)) {\n        item.prev.next = item.next;\n        item.next.prev = item.prev;\n        item.next = item.prev = null;\n      }\n      item = next;\n    }\n  };\n  LinkedList.prototype.clear = function () {\n    this.list.next.prev = this.list.prev.next = null;\n    this.list.next = this.list.prev = this.list;\n    return this;\n  };\n  LinkedList.prototype[Symbol.iterator] = function () {\n    var current;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          current = this.list.next;\n          _a.label = 1;\n        case 1:\n          if (!(current.data !== exports.END)) return [3, 3];\n          return [4, current.data];\n        case 2:\n          _a.sent();\n          current = current.next;\n          return [3, 1];\n        case 3:\n          return [2];\n      }\n    });\n  };\n  LinkedList.prototype.reversed = function () {\n    var current;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          current = this.list.prev;\n          _a.label = 1;\n        case 1:\n          if (!(current.data !== exports.END)) return [3, 3];\n          return [4, current.data];\n        case 2:\n          _a.sent();\n          current = current.prev;\n          return [3, 1];\n        case 3:\n          return [2];\n      }\n    });\n  };\n  LinkedList.prototype.insert = function (data, isBefore) {\n    if (isBefore === void 0) {\n      isBefore = null;\n    }\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    var item = new ListItem(data);\n    var cur = this.list.next;\n    while (cur.data !== exports.END && isBefore(cur.data, item.data)) {\n      cur = cur.next;\n    }\n    item.prev = cur.prev;\n    item.next = cur;\n    cur.prev.next = cur.prev = item;\n    return this;\n  };\n  LinkedList.prototype.sort = function (isBefore) {\n    var e_4, _a;\n    if (isBefore === void 0) {\n      isBefore = null;\n    }\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    var lists = [];\n    try {\n      for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        lists.push(new LinkedList(item));\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    this.list.next = this.list.prev = this.list;\n    while (lists.length > 1) {\n      var l1 = lists.shift();\n      var l2 = lists.shift();\n      l1.merge(l2, isBefore);\n      lists.push(l1);\n    }\n    if (lists.length) {\n      this.list = lists[0].list;\n    }\n    return this;\n  };\n  LinkedList.prototype.merge = function (list, isBefore) {\n    var _a, _b, _c, _d, _e;\n    if (isBefore === void 0) {\n      isBefore = null;\n    }\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    var lcur = this.list.next;\n    var mcur = list.list.next;\n    while (lcur.data !== exports.END && mcur.data !== exports.END) {\n      if (isBefore(mcur.data, lcur.data)) {\n        _a = __read([lcur, mcur], 2), mcur.prev.next = _a[0], lcur.prev.next = _a[1];\n        _b = __read([lcur.prev, mcur.prev], 2), mcur.prev = _b[0], lcur.prev = _b[1];\n        _c = __read([list.list, this.list], 2), this.list.prev.next = _c[0], list.list.prev.next = _c[1];\n        _d = __read([list.list.prev, this.list.prev], 2), this.list.prev = _d[0], list.list.prev = _d[1];\n        _e = __read([mcur.next, lcur], 2), lcur = _e[0], mcur = _e[1];\n      } else {\n        lcur = lcur.next;\n      }\n    }\n    if (mcur.data !== exports.END) {\n      this.list.prev.next = list.list.next;\n      list.list.next.prev = this.list.prev;\n      list.list.prev.next = this.list;\n      this.list.prev = list.list.prev;\n      list.list.next = list.list.prev = list.list;\n    }\n    return this;\n  };\n  return LinkedList;\n}();\nexports.LinkedList = LinkedList;","map":{"version":3,"mappings":"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","names":["exports","Symbol","data","_i","args","list","ListItem","next","prev","push","LinkedList","a","b","item","slice","reverse","items","map","Map","item_1","set","has","iterator","current","_a","isBefore","bind","cur","lists","length","l1","shift","l2","merge","lcur","mcur","_b","_c","_d","_e"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/util/LinkedList.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implement a generic LinkedList object.\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/*****************************************************************/\n/**\n *  A symbol used to mark the special node used to indicate\n *  the start and end of the list.\n */\nexport const END = Symbol();\n\n/**\n * Shorthand type for the functions used to sort the data items\n *\n * @template DataClass   The type of data stored in the list\n */\nexport type SortFn<DataClass> = (a: DataClass, b: DataClass) => boolean;\n\n/*****************************************************************/\n/**\n *  The ListItem interface (for a specific type of data item)\n *\n *  These are the items in the doubly-linked list.\n *\n * @template DataClass   The type of data stored in the list\n */\n\nexport class ListItem<DataClass> {\n  /**\n   * The data for the list item\n   */\n  public data: DataClass | symbol;\n\n  /**\n   * Pointers to the next item in the list\n   */\n  public next: ListItem<DataClass> = null;\n  /**\n   * Pointers to the previous item in the list\n   */\n  public prev: ListItem<DataClass> = null;\n\n  /**\n   * @param {any} data  The data to be stored in the list item\n   * @constructor\n   */\n  constructor(data: any = null) {\n    this.data = data;\n  }\n}\n\n/*****************************************************************/\n/**\n *  Implements the generic LinkedList class\n *\n * @template DataClass   The type of data stored in the list\n */\n\nexport class LinkedList<DataClass> {\n  /**\n   * The linked list\n   */\n  protected list: ListItem<DataClass>;\n\n  /**\n   *  This.list is a special ListItem whose next property\n   *    points to the head of the list and whose prev\n   *    property points to the tail.  This lets us relink\n   *    the head and tail items in the same way as any other\n   *    item in the list, without having to handle special\n   *    cases.\n   *\n   * @param {DataClass[]} args  The data items that form the initial list\n   * @constructor\n   */\n  constructor(...args: DataClass[]) {\n    this.list = new ListItem<DataClass>(END);\n    this.list.next = this.list.prev = this.list;\n    this.push(...args);\n  }\n\n  /**\n   *  Used for sorting and merging lists (Overridden by subclasses)\n   *\n   * @param {DataClass} a   The first item to compare\n   * @param {DataClass} b   The second item to compare\n   * @return {boolean}      True if a is before b, false otherwise\n   */\n  public isBefore(a: DataClass, b: DataClass): boolean {\n    return a < b;\n  }\n\n  /**\n   * Push items on the end of the list\n   *\n   * @param {DataClass[]} args   The list of data items to be pushed\n   * @return {LinkedList}        The LinkedList object (for chaining)\n   */\n  public push(...args: DataClass[]): LinkedList<DataClass> {\n    for (const data of args) {\n      let item = new ListItem<DataClass>(data);\n      item.next = this.list;\n      item.prev = this.list.prev;\n      this.list.prev = item;\n      item.prev.next = item;\n    }\n    return this;\n  }\n\n  /**\n   * Pop the end item off the list and return its data\n   *\n   * @return {DataClass}  The data from the last item in the list\n   */\n  public pop(): DataClass {\n    let item = this.list.prev;\n    if (item.data === END) {\n      return null;\n    }\n    this.list.prev = item.prev;\n    item.prev.next = this.list;\n    item.next = item.prev = null;\n    return item.data as DataClass;\n  }\n\n  /**\n   * Push items at the head of the list\n   *\n   * @param {DataClass[]} args   The list of data items to inserted\n   * @return {LinkedList}        The LinkedList object (for chaining)\n   */\n  public unshift(...args: DataClass[]): LinkedList<DataClass> {\n    for (const data of args.slice(0).reverse()) {\n      let item = new ListItem<DataClass>(data);\n      item.next = this.list.next;\n      item.prev = this.list;\n      this.list.next = item;\n      item.next.prev = item;\n    }\n    return this;\n  }\n\n  /**\n   * Remove an item from the head of the list and return its data\n   *\n   * @return {DataClass}  The data from the first item in the list\n   */\n  public shift(): DataClass {\n    let item = this.list.next;\n    if (item.data === END) {\n      return null;\n    }\n    this.list.next = item.next;\n    item.next.prev = this.list;\n    item.next = item.prev = null;\n    return item.data as DataClass;\n  }\n\n  /**\n   * Remove items from the list\n   *\n   * @param {DataClass[]} items   The items to remove\n   */\n  public remove(...items: DataClass[]) {\n    const map = new Map<DataClass, boolean>();\n    for (const item of items) {\n      map.set(item, true);\n    }\n    let item = this.list.next;\n    while (item.data !== END) {\n      const next = item.next;\n      if (map.has(item.data as DataClass)) {\n        item.prev.next = item.next;\n        item.next.prev = item.prev;\n        item.next = item.prev = null;\n      }\n      item = next;\n    }\n  }\n\n  /**\n   * Empty the list\n   *\n   * @return {LinkedList}  The LinkedList object (for chaining)\n   */\n  public clear(): LinkedList<DataClass> {\n    this.list.next.prev = this.list.prev.next = null;\n    this.list.next = this.list.prev = this.list;\n    return this;\n  }\n\n  /**\n   * An iterator for the list in forward order\n   *\n   * @yield {DataClass} The next item in the iteration sequence\n   */\n  public *[Symbol.iterator](): IterableIterator<DataClass> {\n    let current = this.list.next;\n\n    while (current.data !== END) {\n      yield current.data as DataClass;\n      current = current.next;\n    }\n  }\n\n  /**\n   * An iterator for the list in reverse order\n   *\n   * @yield {DataClass} The previous item in the iteration sequence\n   */\n  public *reversed(): IterableIterator<DataClass> {\n    let current = this.list.prev;\n\n    while (current.data !== END) {\n      yield current.data as DataClass;\n      current = current.prev;\n    }\n  }\n\n  /**\n   * Insert a new item into a sorted list in the correct locations\n   *\n   * @param {DataClass} data   The data item to add\n   * @param {SortFn} isBefore   The function used to order the data\n   * @param {LinkedList}        The LinkedList object (for chaining)\n   */\n  public insert(data: DataClass, isBefore: SortFn<DataClass> = null) {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    let item = new ListItem<DataClass>(data);\n    let cur = this.list.next;\n    while (cur.data !== END && isBefore(cur.data as DataClass, item.data as DataClass)) {\n      cur = cur.next;\n    }\n    item.prev = cur.prev;\n    item.next = cur;\n    cur.prev.next = cur.prev = item;\n    return this;\n  }\n\n  /**\n   * Sort the list using an optional sort function\n   *\n   * @param {SortFn} isBefore  The function used to order the data\n   * @return {LinkedList}      The LinkedList object (for chaining)\n   */\n  public sort(isBefore: SortFn<DataClass> = null): LinkedList<DataClass> {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    //\n    //  Make an array of singleton lists\n    //\n    let lists: LinkedList<DataClass>[] = [];\n    for (const item of this) {\n      lists.push(new LinkedList<DataClass>(item as DataClass));\n    }\n    //\n    //  Clear current list\n    //\n    this.list.next = this.list.prev = this.list;\n    //\n    //  Merge pairs of lists until there is only one left\n    //\n    while (lists.length > 1) {\n      let l1 = lists.shift();\n      let l2 = lists.shift();\n      l1.merge(l2, isBefore);\n      lists.push(l1);\n    }\n    //\n    //  Use the final list as our list\n    //\n    if (lists.length) {\n      this.list = lists[0].list;\n    }\n    return this;\n  }\n\n  /**\n   * Merge a sorted list with another sorted list\n   *\n   * @param {LinkedList} list  The list to merge into this instance's list\n   * @param {SortFn} isBefore  The function used to order the data\n   * @return {LinkedList}      The LinkedList instance (for chaining)\n   */\n  public merge(list: LinkedList<DataClass>, isBefore: SortFn<DataClass> = null): LinkedList<DataClass> {\n    if (isBefore === null) {\n      isBefore = this.isBefore.bind(this);\n    }\n    //\n    //  Get the head of each list\n    //\n    let lcur = this.list.next;\n    let mcur = list.list.next;\n    //\n    //  While there is more in both lists\n    //\n    while (lcur.data !== END && mcur.data !== END) {\n      //\n      //  If the merge item is before the list item\n      //    (we have found where the head of the merge list belongs)\n      //    Link the merge list into the main list at this point\n      //      and make the merge list be the remainder of the original list.\n      //    The merge continues by looking for where the rest of the original\n      //      list fits into the newly formed main list (the old merge list).\n      //  Otherwise\n      //    Go on to the next item in the main list\n      //\n      if (isBefore(mcur.data as DataClass, lcur.data as DataClass)) {\n        [mcur.prev.next, lcur.prev.next] = [lcur, mcur];\n        [mcur.prev, lcur.prev] = [lcur.prev, mcur.prev];\n        [this.list.prev.next, list.list.prev.next] = [list.list, this.list];\n        [this.list.prev, list.list.prev] = [list.list.prev, this.list.prev];\n        [lcur, mcur] = [mcur.next, lcur];\n      } else {\n        lcur = lcur.next;\n      }\n    }\n    //\n    //  If there is more to be merged (i.e., we came to the end of the main list),\n    //  then link that at the end of the main list.\n    //\n    if (mcur.data !== END) {\n      this.list.prev.next = list.list.next;\n      list.list.next.prev = this.list.prev;\n      list.list.prev.next = this.list;\n      this.list.prev = list.list.prev;\n      list.list.next = list.list.prev = list.list;\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}