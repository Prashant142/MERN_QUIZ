{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMi = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar MmlMi = function (_super) {\n  __extends(MmlMi, _super);\n  function MmlMi() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.texclass = MmlNode_js_1.TEXCLASS.ORD;\n    return _this;\n  }\n  Object.defineProperty(MmlMi.prototype, \"kind\", {\n    get: function () {\n      return 'mi';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMi.prototype.setInheritedAttributes = function (attributes, display, level, prime) {\n    if (attributes === void 0) {\n      attributes = {};\n    }\n    if (display === void 0) {\n      display = false;\n    }\n    if (level === void 0) {\n      level = 0;\n    }\n    if (prime === void 0) {\n      prime = false;\n    }\n    _super.prototype.setInheritedAttributes.call(this, attributes, display, level, prime);\n    var text = this.getText();\n    if (text.match(MmlMi.singleCharacter) && !attributes.mathvariant) {\n      this.attributes.setInherited('mathvariant', 'italic');\n    }\n  };\n  MmlMi.prototype.setTeXclass = function (prev) {\n    this.getPrevClass(prev);\n    var name = this.getText();\n    if (name.length > 1 && name.match(MmlMi.operatorName) && this.attributes.get('mathvariant') === 'normal' && this.getProperty('autoOP') === undefined && this.getProperty('texClass') === undefined) {\n      this.texClass = MmlNode_js_1.TEXCLASS.OP;\n      this.setProperty('autoOP', true);\n    }\n    return this;\n  };\n  MmlMi.defaults = __assign({}, MmlNode_js_1.AbstractMmlTokenNode.defaults);\n  MmlMi.operatorName = /^[a-z][a-z0-9]*$/i;\n  MmlMi.singleCharacter = /^[\\uD800-\\uDBFF]?.[\\u0300-\\u036F\\u1AB0-\\u1ABE\\u1DC0-\\u1DFF\\u20D0-\\u20EF]*$/;\n  return MmlMi;\n}(MmlNode_js_1.AbstractMmlTokenNode);\nexports.MmlMi = MmlMi;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AAOA;EAA2BA;EAA3B;IAAA;IAsBYC,cAAQ,GAAGC,qBAAQ,CAACC,GAAG;;EA0CnC;EArCEC,sBAAWC,uBAAI;SAAf;MACE,OAAO,IAAI;IACb,CAAC;;;;EAQMA,sCAAsB,GAA7B,UAA8BC,UAA8B,EAC9BC,OAAwB,EAAEC,KAAiB,EAAEC,KAAsB;IADnE;MAAAH,eAA8B;IAAA;IAC9B;MAAAC,eAAwB;IAAA;IAAE;MAAAC,SAAiB;IAAA;IAAE;MAAAC,aAAsB;IAAA;IAC/FC,iBAAMC,sBAAsB,YAACL,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAC/D,IAAIG,IAAI,GAAG,IAAI,CAACC,OAAO,EAAE;IACzB,IAAID,IAAI,CAACE,KAAK,CAACT,KAAK,CAACU,eAAe,CAAC,IAAI,CAACT,UAAU,CAACU,WAAW,EAAE;MAChE,IAAI,CAACV,UAAU,CAACW,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC;;EAEzD,CAAC;EAOMZ,2BAAW,GAAlB,UAAmBa,IAAqB;IACtC,IAAI,CAACC,YAAY,CAACD,IAAI,CAAC;IACvB,IAAIE,IAAI,GAAG,IAAI,CAACP,OAAO,EAAE;IACzB,IAAIO,IAAI,CAACC,MAAM,GAAG,CAAC,IAAID,IAAI,CAACN,KAAK,CAACT,KAAK,CAACiB,YAAY,CAAC,IACjD,IAAI,CAAChB,UAAU,CAACiB,GAAG,CAAC,aAAa,CAAC,KAAK,QAAQ,IAC/C,IAAI,CAACC,WAAW,CAAC,QAAQ,CAAC,KAAKC,SAAS,IACxC,IAAI,CAACD,WAAW,CAAC,UAAU,CAAC,KAAKC,SAAS,EAAE;MAC9C,IAAI,CAACC,QAAQ,GAAGxB,qBAAQ,CAACyB,EAAE;MAC3B,IAAI,CAACC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC;;IAElC,OAAO,IAAI;EACb,CAAC;EAzDavB,cAAQ,gBACjBH,iCAAoB,CAAC2B,QAAQ;EAMpBxB,kBAAY,GAAW,mBAAmB;EAI1CA,qBAAe,GAC3B,4EAA4E;EA+ChF,YAAC;CAAA,CAhE0BH,iCAAoB;AAAlC4B","names":["__extends","_this","MmlNode_js_1","ORD","Object","MmlMi","attributes","display","level","prime","_super","setInheritedAttributes","text","getText","match","singleCharacter","mathvariant","setInherited","prev","getPrevClass","name","length","operatorName","get","getProperty","undefined","texClass","OP","setProperty","defaults","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mi.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMi node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlTokenNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMi node class (subclass of AbstractMmlTokenNode)\n */\n\nexport class MmlMi extends AbstractMmlTokenNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlTokenNode.defaults\n  };\n\n  /**\n   * Pattern for operator names\n   */\n  public static operatorName: RegExp = /^[a-z][a-z0-9]*$/i;\n  /**\n   * Pattern for single-character texts\n   */\n  public static singleCharacter: RegExp =\n    /^[\\uD800-\\uDBFF]?.[\\u0300-\\u036F\\u1AB0-\\u1ABE\\u1DC0-\\u1DFF\\u20D0-\\u20EF]*$/;\n\n  /**\n   * TeX class is ORD\n   */\n  protected texclass = TEXCLASS.ORD;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mi';\n  }\n\n  /**\n   * Do the usual inheritance, then check the text length to see\n   *   if mathvariant should be normal or italic.\n   *\n   * @override\n   */\n  public setInheritedAttributes(attributes: AttributeList = {},\n                                display: boolean = false, level: number = 0, prime: boolean = false) {\n    super.setInheritedAttributes(attributes, display, level, prime);\n    let text = this.getText();\n    if (text.match(MmlMi.singleCharacter) && !attributes.mathvariant) {\n      this.attributes.setInherited('mathvariant', 'italic');\n    }\n  }\n\n  /**\n   * Mark multi-character texts as OP rather than ORD for spacing purposes\n   *\n   * @override\n   */\n  public setTeXclass(prev: AbstractMmlNode) {\n    this.getPrevClass(prev);\n    let name = this.getText();\n    if (name.length > 1 && name.match(MmlMi.operatorName) &&\n        this.attributes.get('mathvariant') === 'normal' &&\n        this.getProperty('autoOP') === undefined &&\n        this.getProperty('texClass') === undefined) {\n      this.texClass = TEXCLASS.OP;\n      this.setProperty('autoOP', true);\n    }\n    return this;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}