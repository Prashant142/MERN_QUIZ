{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonOutputJax = void 0;\nvar OutputJax_js_1 = require(\"../../core/OutputJax.js\");\nvar MathItem_js_1 = require(\"../../core/MathItem.js\");\nvar Options_js_1 = require(\"../../util/Options.js\");\nvar lengths_js_1 = require(\"../../util/lengths.js\");\nvar Styles_js_1 = require(\"../../util/Styles.js\");\nvar StyleList_js_1 = require(\"../../util/StyleList.js\");\nvar CommonOutputJax = function (_super) {\n  __extends(CommonOutputJax, _super);\n  function CommonOutputJax(options, defaultFactory, defaultFont) {\n    if (options === void 0) {\n      options = null;\n    }\n    if (defaultFactory === void 0) {\n      defaultFactory = null;\n    }\n    if (defaultFont === void 0) {\n      defaultFont = null;\n    }\n    var _this = this;\n    var _a = __read((0, Options_js_1.separateOptions)(options, defaultFont.OPTIONS), 2),\n      jaxOptions = _a[0],\n      fontOptions = _a[1];\n    _this = _super.call(this, jaxOptions) || this;\n    _this.factory = _this.options.wrapperFactory || new defaultFactory();\n    _this.factory.jax = _this;\n    _this.cssStyles = _this.options.cssStyles || new StyleList_js_1.CssStyles();\n    _this.font = _this.options.font || new defaultFont(fontOptions);\n    _this.unknownCache = new Map();\n    return _this;\n  }\n  CommonOutputJax.prototype.typeset = function (math, html) {\n    this.setDocument(html);\n    var node = this.createNode();\n    this.toDOM(math, node, html);\n    return node;\n  };\n  CommonOutputJax.prototype.createNode = function () {\n    var jax = this.constructor.NAME;\n    return this.html('mjx-container', {\n      'class': 'MathJax',\n      jax: jax\n    });\n  };\n  CommonOutputJax.prototype.setScale = function (node) {\n    var scale = this.math.metrics.scale * this.options.scale;\n    if (scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', (0, lengths_js_1.percent)(scale));\n    }\n  };\n  CommonOutputJax.prototype.toDOM = function (math, node, html) {\n    if (html === void 0) {\n      html = null;\n    }\n    this.setDocument(html);\n    this.math = math;\n    this.pxPerEm = math.metrics.ex / this.font.params.x_height;\n    math.root.setTeXclass(null);\n    this.setScale(node);\n    this.nodeMap = new Map();\n    this.container = node;\n    this.processMath(math.root, node);\n    this.nodeMap = null;\n    this.executeFilters(this.postFilters, math, html, node);\n  };\n  CommonOutputJax.prototype.getBBox = function (math, html) {\n    this.setDocument(html);\n    this.math = math;\n    math.root.setTeXclass(null);\n    this.nodeMap = new Map();\n    var bbox = this.factory.wrap(math.root).getOuterBBox();\n    this.nodeMap = null;\n    return bbox;\n  };\n  CommonOutputJax.prototype.getMetrics = function (html) {\n    var e_1, _a;\n    this.setDocument(html);\n    var adaptor = this.adaptor;\n    var maps = this.getMetricMaps(html);\n    try {\n      for (var _b = __values(html.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var math = _c.value;\n        var parent_1 = adaptor.parent(math.start.node);\n        if (math.state() < MathItem_js_1.STATE.METRICS && parent_1) {\n          var map = maps[math.display ? 1 : 0];\n          var _d = map.get(parent_1),\n            em = _d.em,\n            ex = _d.ex,\n            containerWidth = _d.containerWidth,\n            lineWidth = _d.lineWidth,\n            scale = _d.scale,\n            family = _d.family;\n          math.setMetrics(em, ex, containerWidth, lineWidth, scale);\n          if (this.options.mtextInheritFont) {\n            math.outputData.mtextFamily = family;\n          }\n          if (this.options.merrorInheritFont) {\n            math.outputData.merrorFamily = family;\n          }\n          math.state(MathItem_js_1.STATE.METRICS);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  CommonOutputJax.prototype.getMetricsFor = function (node, display) {\n    var getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    var test = this.getTestElement(node, display);\n    var metrics = this.measureMetrics(test, getFamily);\n    this.adaptor.remove(test);\n    return metrics;\n  };\n  CommonOutputJax.prototype.getMetricMaps = function (html) {\n    var e_2, _a, e_3, _b, e_4, _c, e_5, _d, e_6, _e;\n    var adaptor = this.adaptor;\n    var domMaps = [new Map(), new Map()];\n    try {\n      for (var _f = __values(html.math), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var math = _g.value;\n        var node = adaptor.parent(math.start.node);\n        if (node && math.state() < MathItem_js_1.STATE.METRICS) {\n          var map = domMaps[math.display ? 1 : 0];\n          if (!map.has(node)) {\n            map.set(node, this.getTestElement(node, math.display));\n          }\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    var getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    var maps = [new Map(), new Map()];\n    try {\n      for (var _h = __values(maps.keys()), _j = _h.next(); !_j.done; _j = _h.next()) {\n        var i = _j.value;\n        try {\n          for (var _k = (e_4 = void 0, __values(domMaps[i].keys())), _l = _k.next(); !_l.done; _l = _k.next()) {\n            var node = _l.value;\n            maps[i].set(node, this.measureMetrics(domMaps[i].get(node), getFamily));\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    try {\n      for (var _m = __values(maps.keys()), _o = _m.next(); !_o.done; _o = _m.next()) {\n        var i = _o.value;\n        try {\n          for (var _p = (e_6 = void 0, __values(domMaps[i].values())), _q = _p.next(); !_q.done; _q = _p.next()) {\n            var node = _q.value;\n            adaptor.remove(node);\n          }\n        } catch (e_6_1) {\n          e_6 = {\n            error: e_6_1\n          };\n        } finally {\n          try {\n            if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n          } finally {\n            if (e_6) throw e_6.error;\n          }\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return maps;\n  };\n  CommonOutputJax.prototype.getTestElement = function (node, display) {\n    var adaptor = this.adaptor;\n    if (!this.testInline) {\n      this.testInline = this.html('mjx-test', {\n        style: {\n          display: 'inline-block',\n          width: '100%',\n          'font-style': 'normal',\n          'font-weight': 'normal',\n          'font-size': '100%',\n          'font-size-adjust': 'none',\n          'text-indent': 0,\n          'text-transform': 'none',\n          'letter-spacing': 'normal',\n          'word-spacing': 'normal',\n          overflow: 'hidden',\n          height: '1px',\n          'margin-right': '-1px'\n        }\n      }, [this.html('mjx-left-box', {\n        style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'left'\n        }\n      }), this.html('mjx-ex-box', {\n        style: {\n          position: 'absolute',\n          overflow: 'hidden',\n          width: '1px',\n          height: '60ex'\n        }\n      }), this.html('mjx-right-box', {\n        style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'right'\n        }\n      })]);\n      this.testDisplay = adaptor.clone(this.testInline);\n      adaptor.setStyle(this.testDisplay, 'display', 'table');\n      adaptor.setStyle(this.testDisplay, 'margin-right', '');\n      adaptor.setStyle(adaptor.firstChild(this.testDisplay), 'display', 'none');\n      var right = adaptor.lastChild(this.testDisplay);\n      adaptor.setStyle(right, 'display', 'table-cell');\n      adaptor.setStyle(right, 'width', '10000em');\n      adaptor.setStyle(right, 'float', '');\n    }\n    return adaptor.append(node, adaptor.clone(display ? this.testDisplay : this.testInline));\n  };\n  CommonOutputJax.prototype.measureMetrics = function (node, getFamily) {\n    var adaptor = this.adaptor;\n    var family = getFamily ? adaptor.fontFamily(node) : '';\n    var em = adaptor.fontSize(node);\n    var _a = __read(adaptor.nodeSize(adaptor.childNode(node, 1)), 2),\n      w = _a[0],\n      h = _a[1];\n    var ex = w ? h / 60 : em * this.options.exFactor;\n    var containerWidth = !w ? 1000000 : adaptor.getStyle(node, 'display') === 'table' ? adaptor.nodeSize(adaptor.lastChild(node))[0] - 1 : adaptor.nodeBBox(adaptor.lastChild(node)).left - adaptor.nodeBBox(adaptor.firstChild(node)).left - 2;\n    var scale = Math.max(this.options.minScale, this.options.matchFontHeight ? ex / this.font.params.x_height / em : 1);\n    var lineWidth = 1000000;\n    return {\n      em: em,\n      ex: ex,\n      containerWidth: containerWidth,\n      lineWidth: lineWidth,\n      scale: scale,\n      family: family\n    };\n  };\n  CommonOutputJax.prototype.styleSheet = function (html) {\n    var e_7, _a;\n    this.setDocument(html);\n    this.cssStyles.clear();\n    this.cssStyles.addStyles(this.constructor.commonStyles);\n    if ('getStyles' in html) {\n      try {\n        for (var _b = __values(html.getStyles()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var styles = _c.value;\n          this.cssStyles.addStyles(styles);\n        }\n      } catch (e_7_1) {\n        e_7 = {\n          error: e_7_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_7) throw e_7.error;\n        }\n      }\n    }\n    this.addWrapperStyles(this.cssStyles);\n    this.addFontStyles(this.cssStyles);\n    var sheet = this.html('style', {\n      id: 'MJX-styles'\n    }, [this.text('\\n' + this.cssStyles.cssText + '\\n')]);\n    return sheet;\n  };\n  CommonOutputJax.prototype.addFontStyles = function (styles) {\n    styles.addStyles(this.font.styles);\n  };\n  CommonOutputJax.prototype.addWrapperStyles = function (styles) {\n    var e_8, _a;\n    try {\n      for (var _b = __values(this.factory.getKinds()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var kind = _c.value;\n        this.addClassStyles(this.factory.getNodeClass(kind), styles);\n      }\n    } catch (e_8_1) {\n      e_8 = {\n        error: e_8_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_8) throw e_8.error;\n      }\n    }\n  };\n  CommonOutputJax.prototype.addClassStyles = function (CLASS, styles) {\n    styles.addStyles(CLASS.styles);\n  };\n  CommonOutputJax.prototype.setDocument = function (html) {\n    if (html) {\n      this.document = html;\n      this.adaptor.document = html.document;\n    }\n  };\n  CommonOutputJax.prototype.html = function (type, def, content, ns) {\n    if (def === void 0) {\n      def = {};\n    }\n    if (content === void 0) {\n      content = [];\n    }\n    return this.adaptor.node(type, def, content, ns);\n  };\n  CommonOutputJax.prototype.text = function (text) {\n    return this.adaptor.text(text);\n  };\n  CommonOutputJax.prototype.fixed = function (m, n) {\n    if (n === void 0) {\n      n = 3;\n    }\n    if (Math.abs(m) < .0006) {\n      return '0';\n    }\n    return m.toFixed(n).replace(/\\.?0+$/, '');\n  };\n  CommonOutputJax.prototype.measureText = function (text, variant, font) {\n    if (font === void 0) {\n      font = ['', false, false];\n    }\n    var node = this.unknownText(text, variant);\n    if (variant === '-explicitFont') {\n      var styles = this.cssFontStyles(font);\n      this.adaptor.setAttributes(node, {\n        style: styles\n      });\n    }\n    return this.measureTextNodeWithCache(node, text, variant, font);\n  };\n  CommonOutputJax.prototype.measureTextNodeWithCache = function (text, chars, variant, font) {\n    if (font === void 0) {\n      font = ['', false, false];\n    }\n    if (variant === '-explicitFont') {\n      variant = [font[0], font[1] ? 'T' : 'F', font[2] ? 'T' : 'F', ''].join('-');\n    }\n    if (!this.unknownCache.has(variant)) {\n      this.unknownCache.set(variant, new Map());\n    }\n    var map = this.unknownCache.get(variant);\n    var cached = map.get(chars);\n    if (cached) return cached;\n    var bbox = this.measureTextNode(text);\n    map.set(chars, bbox);\n    return bbox;\n  };\n  CommonOutputJax.prototype.measureXMLnode = function (xml) {\n    var adaptor = this.adaptor;\n    var content = this.html('mjx-xml-block', {\n      style: {\n        display: 'inline-block'\n      }\n    }, [adaptor.clone(xml)]);\n    var base = this.html('mjx-baseline', {\n      style: {\n        display: 'inline-block',\n        width: 0,\n        height: 0\n      }\n    });\n    var style = {\n      position: 'absolute',\n      display: 'inline-block',\n      'font-family': 'initial',\n      'line-height': 'normal'\n    };\n    var node = this.html('mjx-measure-xml', {\n      style: style\n    }, [base, content]);\n    adaptor.append(adaptor.parent(this.math.start.node), this.container);\n    adaptor.append(this.container, node);\n    var em = this.math.metrics.em * this.math.metrics.scale;\n    var _a = adaptor.nodeBBox(content),\n      left = _a.left,\n      right = _a.right,\n      bottom = _a.bottom,\n      top = _a.top;\n    var w = (right - left) / em;\n    var h = (adaptor.nodeBBox(base).top - top) / em;\n    var d = (bottom - top) / em - h;\n    adaptor.remove(this.container);\n    adaptor.remove(node);\n    return {\n      w: w,\n      h: h,\n      d: d\n    };\n  };\n  CommonOutputJax.prototype.cssFontStyles = function (font, styles) {\n    if (styles === void 0) {\n      styles = {};\n    }\n    var _a = __read(font, 3),\n      family = _a[0],\n      italic = _a[1],\n      bold = _a[2];\n    styles['font-family'] = this.font.getFamily(family);\n    if (italic) styles['font-style'] = 'italic';\n    if (bold) styles['font-weight'] = 'bold';\n    return styles;\n  };\n  CommonOutputJax.prototype.getFontData = function (styles) {\n    if (!styles) {\n      styles = new Styles_js_1.Styles();\n    }\n    return [this.font.getFamily(styles.get('font-family')), styles.get('font-style') === 'italic', styles.get('font-weight') === 'bold'];\n  };\n  CommonOutputJax.NAME = 'Common';\n  CommonOutputJax.OPTIONS = __assign(__assign({}, OutputJax_js_1.AbstractOutputJax.OPTIONS), {\n    scale: 1,\n    minScale: .5,\n    mtextInheritFont: false,\n    merrorInheritFont: false,\n    mtextFont: '',\n    merrorFont: 'serif',\n    mathmlSpacing: false,\n    skipAttributes: {},\n    exFactor: .5,\n    displayAlign: 'center',\n    displayIndent: '0',\n    wrapperFactory: null,\n    font: null,\n    cssStyles: null\n  });\n  CommonOutputJax.commonStyles = {};\n  return CommonOutputJax;\n}(OutputJax_js_1.AbstractOutputJax);\nexports.CommonOutputJax = CommonOutputJax;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;AAEA;AAGA;AAGA;AACA;AACA;AAmCA;EAMUA;EA0GR,yBAAYC,OAA0B,EAC1BC,cAAkD,EAClDC,WAAsB;IAFtB;MAAAF,cAA0B;IAAA;IAC1B;MAAAC,qBAAkD;IAAA;IAClD;MAAAC,kBAAsB;IAAA;IAFlC;IAGQ,gBAA4B,gCAAe,EAACF,OAAO,EAAEE,WAAW,CAACC,OAAO,CAAC;MAAxEC,UAAU;MAAEC,WAAW,QAAiD;YAC/EC,kBAAMF,UAAU,CAAC;IACjBG,KAAI,CAACC,OAAO,GAAGD,KAAI,CAACP,OAAO,CAACS,cAAc,IACxC,IAAIR,cAAc,EAC8B;IAClDM,KAAI,CAACC,OAAO,CAACE,GAAG,GAAGH,KAAI;IACvBA,KAAI,CAACI,SAAS,GAAGJ,KAAI,CAACP,OAAO,CAACW,SAAS,IAAI,IAAIC,wBAAS,EAAE;IAC1DL,KAAI,CAACM,IAAI,GAAGN,KAAI,CAACP,OAAO,CAACa,IAAI,IAAI,IAAIX,WAAW,CAACG,WAAW,CAAC;IAC7DE,KAAI,CAACO,YAAY,GAAG,IAAIC,GAAG,EAAE;;EAC/B;EAYOC,iCAAO,GAAd,UAAeC,IAAuB,EAAEC,IAA2B;IACjE,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;IACtB,IAAIE,IAAI,GAAG,IAAI,CAACC,UAAU,EAAE;IAC5B,IAAI,CAACC,KAAK,CAACL,IAAI,EAAEG,IAAI,EAAEF,IAAI,CAAC;IAC5B,OAAOE,IAAI;EACb,CAAC;EAKSJ,oCAAU,GAApB;IACE,IAAMN,GAAG,GAAI,IAAI,CAACa,WAAsC,CAACC,IAAI;IAC7D,OAAO,IAAI,CAACN,IAAI,CAAC,eAAe,EAAE;MAAC,OAAO,EAAE,SAAS;MAAER,GAAG,EAAEA;IAAG,CAAC,CAAC;EACnE,CAAC;EAKSM,kCAAQ,GAAlB,UAAmBI,IAAO;IACxB,IAAMK,KAAK,GAAG,IAAI,CAACR,IAAI,CAACS,OAAO,CAACD,KAAK,GAAG,IAAI,CAACzB,OAAO,CAACyB,KAAK;IAC1D,IAAIA,KAAK,KAAK,CAAC,EAAE;MACf,IAAI,CAACE,OAAO,CAACC,QAAQ,CAACR,IAAI,EAAE,UAAU,EAAE,wBAAO,EAACK,KAAK,CAAC,CAAC;;EAE3D,CAAC;EAgBMT,+BAAK,GAAZ,UAAaC,IAAuB,EAAEG,IAAO,EAAEF,IAAkC;IAAlC;MAAAA,WAAkC;IAAA;IAC/E,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;IACtB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACY,OAAO,GAAGZ,IAAI,CAACS,OAAO,CAACI,EAAE,GAAG,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAACC,QAAQ;IAC1Df,IAAI,CAACgB,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACC,QAAQ,CAACf,IAAI,CAAC;IACnB,IAAI,CAACgB,OAAO,GAAG,IAAIrB,GAAG,EAAc;IACpC,IAAI,CAACsB,SAAS,GAAGjB,IAAI;IACrB,IAAI,CAACkB,WAAW,CAACrB,IAAI,CAACgB,IAAI,EAAEb,IAAI,CAAC;IACjC,IAAI,CAACgB,OAAO,GAAG,IAAI;IACnB,IAAI,CAACG,cAAc,CAAC,IAAI,CAACC,WAAW,EAAEvB,IAAI,EAAEC,IAAI,EAAEE,IAAI,CAAC;EACzD,CAAC;EAgBMJ,iCAAO,GAAd,UAAeC,IAAuB,EAAEC,IAA2B;IACjE,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;IACtB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChBA,IAAI,CAACgB,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC;IAC3B,IAAI,CAACE,OAAO,GAAG,IAAIrB,GAAG,EAAc;IACpC,IAAI0B,IAAI,GAAG,IAAI,CAACjC,OAAO,CAACkC,IAAI,CAACzB,IAAI,CAACgB,IAAI,CAAC,CAACU,YAAY,EAAE;IACtD,IAAI,CAACP,OAAO,GAAG,IAAI;IACnB,OAAOK,IAAI;EACb,CAAC;EAOMzB,oCAAU,GAAjB,UAAkBE,IAA2B;;IAC3C,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;IACtB,IAAMS,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAMiB,IAAI,GAAG,IAAI,CAACC,aAAa,CAAC3B,IAAI,CAAC;;MACrC,KAAmB,sBAAI,CAACD,IAAI,6CAAE;QAAzB,IAAMA,IAAI;QACb,IAAM6B,QAAM,GAAGnB,OAAO,CAACoB,MAAM,CAAC9B,IAAI,CAAC+B,KAAK,CAAC5B,IAAI,CAAC;QAC9C,IAAIH,IAAI,CAACgC,KAAK,EAAE,GAAGC,mBAAK,CAACC,OAAO,IAAIL,QAAM,EAAE;UAC1C,IAAMM,GAAG,GAAGR,IAAI,CAAC3B,IAAI,CAACoC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;UAChC,SAAqDD,GAAG,CAACE,GAAG,CAACR,QAAM,CAAC;YAAnES,EAAE;YAAEzB,EAAE;YAAE0B,cAAc;YAAEC,SAAS;YAAEhC,KAAK;YAAEiC,MAAM,YAAmB;UAC1EzC,IAAI,CAAC0C,UAAU,CAACJ,EAAE,EAAEzB,EAAE,EAAE0B,cAAc,EAAEC,SAAS,EAAEhC,KAAK,CAAC;UACzD,IAAI,IAAI,CAACzB,OAAO,CAAC4D,gBAAgB,EAAE;YACjC3C,IAAI,CAAC4C,UAAU,CAACC,WAAW,GAAGJ,MAAM;;UAEtC,IAAI,IAAI,CAAC1D,OAAO,CAAC+D,iBAAiB,EAAE;YAClC9C,IAAI,CAAC4C,UAAU,CAACG,YAAY,GAAGN,MAAM;;UAEvCzC,IAAI,CAACgC,KAAK,CAACC,mBAAK,CAACC,OAAO,CAAC;;;;;;;;;;;;;;EAG/B,CAAC;EAOMnC,uCAAa,GAApB,UAAqBI,IAAO,EAAEiC,OAAgB;IAC5C,IAAMY,SAAS,GAAI,IAAI,CAACjE,OAAO,CAAC4D,gBAAgB,IAAI,IAAI,CAAC5D,OAAO,CAAC+D,iBAAkB;IACnF,IAAMG,IAAI,GAAG,IAAI,CAACC,cAAc,CAAC/C,IAAI,EAAEiC,OAAO,CAAC;IAC/C,IAAM3B,OAAO,GAAG,IAAI,CAAC0C,cAAc,CAACF,IAAI,EAAED,SAAS,CAAC;IACpD,IAAI,CAACtC,OAAO,CAAC0C,MAAM,CAACH,IAAI,CAAC;IACzB,OAAOxC,OAAO;EAChB,CAAC;EAQSV,uCAAa,GAAvB,UAAwBE,IAA2B;;IACjD,IAAMS,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAM2C,OAAO,GAAG,CAAC,IAAIvD,GAAG,EAAqB,EAAE,IAAIA,GAAG,EAAqB,CAAC;;MAQ5E,KAAmB,sBAAI,CAACE,IAAI,6CAAE;QAAzB,IAAMA,IAAI;QACb,IAAMG,IAAI,GAAGO,OAAO,CAACoB,MAAM,CAAC9B,IAAI,CAAC+B,KAAK,CAAC5B,IAAI,CAAC;QAC5C,IAAIA,IAAI,IAAIH,IAAI,CAACgC,KAAK,EAAE,GAAGC,mBAAK,CAACC,OAAO,EAAE;UACxC,IAAMC,GAAG,GAAGkB,OAAO,CAACrD,IAAI,CAACoC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;UACzC,IAAI,CAACD,GAAG,CAACmB,GAAG,CAACnD,IAAI,CAAC,EAAE;YAClBgC,GAAG,CAACoB,GAAG,CAACpD,IAAI,EAAE,IAAI,CAAC+C,cAAc,CAAC/C,IAAI,EAAEH,IAAI,CAACoC,OAAO,CAAC,CAAC;;;;;;;;;;;;;;;IAO5D,IAAMY,SAAS,GAAG,IAAI,CAACjE,OAAO,CAAC4D,gBAAgB,IAAI,IAAI,CAAC5D,OAAO,CAAC+D,iBAAiB;IACjF,IAAMnB,IAAI,GAAG,CAAC,IAAI7B,GAAG,EAAkB,EAAE,IAAIA,GAAG,EAAkB,CAAC;;MACnE,KAAgB,sBAAI,CAAC0D,IAAI,EAAE,6CAAE;QAAxB,IAAMC,CAAC;;UACV,KAAmB,wCAAO,CAACA,CAAC,CAAC,CAACD,IAAI,EAAE,8CAAE;YAAjC,IAAMrD,IAAI;YACbwB,IAAI,CAAC8B,CAAC,CAAC,CAACF,GAAG,CAACpD,IAAI,EAAE,IAAI,CAACgD,cAAc,CAACE,OAAO,CAACI,CAAC,CAAC,CAACpB,GAAG,CAAClC,IAAI,CAAC,EAAE6C,SAAS,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;MAM3E,KAAgB,sBAAI,CAACQ,IAAI,EAAE,6CAAE;QAAxB,IAAMC,CAAC;;UACV,KAAmB,wCAAO,CAACA,CAAC,CAAC,CAACC,MAAM,EAAE,8CAAE;YAAnC,IAAMvD,IAAI;YACbO,OAAO,CAAC0C,MAAM,CAACjD,IAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;IAGxB,OAAOwB,IAAI;EACb,CAAC;EAMS5B,wCAAc,GAAxB,UAAyBI,IAAO,EAAEiC,OAAgB;IAChD,IAAM1B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAAC,IAAI,CAACiD,UAAU,EAAE;MACpB,IAAI,CAACA,UAAU,GAAG,IAAI,CAAC1D,IAAI,CAAC,UAAU,EAAE;QAAC2D,KAAK,EAAE;UAC9CxB,OAAO,EAAa,cAAc;UAClCyB,KAAK,EAAe,MAAM;UAC1B,YAAY,EAAQ,QAAQ;UAC5B,aAAa,EAAO,QAAQ;UAC5B,WAAW,EAAS,MAAM;UAC1B,kBAAkB,EAAE,MAAM;UAC1B,aAAa,EAAO,CAAC;UACrB,gBAAgB,EAAI,MAAM;UAC1B,gBAAgB,EAAI,QAAQ;UAC5B,cAAc,EAAM,QAAQ;UAC5BC,QAAQ,EAAY,QAAQ;UAC5BC,MAAM,EAAc,KAAK;UACzB,cAAc,EAAM;;MACrB,CAAC,EAAE,CACF,IAAI,CAAC9D,IAAI,CAAC,cAAc,EAAE;QAAC2D,KAAK,EAAE;UAChCxB,OAAO,EAAE,cAAc;UACvByB,KAAK,EAAE,CAAC;UACR,OAAO,EAAE;;MACV,CAAC,CAAC,EACH,IAAI,CAAC5D,IAAI,CAAC,YAAY,EAAE;QAAC2D,KAAK,EAAE;UAC9BI,QAAQ,EAAE,UAAU;UACpBF,QAAQ,EAAE,QAAQ;UAClBD,KAAK,EAAE,KAAK;UAAEE,MAAM,EAAE;;MACvB,CAAC,CAAC,EACH,IAAI,CAAC9D,IAAI,CAAC,eAAe,EAAE;QAAC2D,KAAK,EAAE;UACjCxB,OAAO,EAAE,cAAc;UACvByB,KAAK,EAAE,CAAC;UACR,OAAO,EAAE;;MACV,CAAC,CAAC,CACJ,CAAC;MACF,IAAI,CAACI,WAAW,GAAGvD,OAAO,CAACwD,KAAK,CAAC,IAAI,CAACP,UAAU,CAAC;MACjDjD,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACsD,WAAW,EAAE,SAAS,EAAE,OAAO,CAAC;MACtDvD,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACsD,WAAW,EAAE,cAAc,EAAE,EAAE,CAAC;MACtDvD,OAAO,CAACC,QAAQ,CAACD,OAAO,CAACyD,UAAU,CAAC,IAAI,CAACF,WAAW,CAAM,EAAE,SAAS,EAAE,MAAM,CAAC;MAC9E,IAAMG,KAAK,GAAG1D,OAAO,CAAC2D,SAAS,CAAC,IAAI,CAACJ,WAAW,CAAM;MACtDvD,OAAO,CAACC,QAAQ,CAACyD,KAAK,EAAE,SAAS,EAAE,YAAY,CAAC;MAChD1D,OAAO,CAACC,QAAQ,CAACyD,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;MAC3C1D,OAAO,CAACC,QAAQ,CAACyD,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC;;IAEtC,OAAO1D,OAAO,CAAC4D,MAAM,CAACnE,IAAI,EAAEO,OAAO,CAACwD,KAAK,CAAC9B,OAAO,GAAG,IAAI,CAAC6B,WAAW,GAAG,IAAI,CAACN,UAAU,CAAM,CAAM;EACpG,CAAC;EAOS5D,wCAAc,GAAxB,UAAyBI,IAAO,EAAE6C,SAAkB;IAClD,IAAMtC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAM+B,MAAM,GAAIO,SAAS,GAAGtC,OAAO,CAAC6D,UAAU,CAACpE,IAAI,CAAC,GAAG,EAAG;IAC1D,IAAMmC,EAAE,GAAG5B,OAAO,CAAC8D,QAAQ,CAACrE,IAAI,CAAC;IAC3B,gBAASO,OAAO,CAAC+D,QAAQ,CAAC/D,OAAO,CAACgE,SAAS,CAACvE,IAAI,EAAE,CAAC,CAAM,CAAC;MAAzDwE,CAAC;MAAEC,CAAC,QAAqD;IAChE,IAAM/D,EAAE,GAAI8D,CAAC,GAAGC,CAAC,GAAG,EAAE,GAAGtC,EAAE,GAAG,IAAI,CAACvD,OAAO,CAAC8F,QAAS;IACpD,IAAMtC,cAAc,GAAI,CAACoC,CAAC,GAAG,OAAO,GAAGjE,OAAO,CAACoE,QAAQ,CAAC3E,IAAI,EAAE,SAAS,CAAC,KAAK,OAAO,GAC5DO,OAAO,CAAC+D,QAAQ,CAAC/D,OAAO,CAAC2D,SAAS,CAAClE,IAAI,CAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GACrDO,OAAO,CAACqE,QAAQ,CAACrE,OAAO,CAAC2D,SAAS,CAAClE,IAAI,CAAM,CAAC,CAAC6E,IAAI,GACnDtE,OAAO,CAACqE,QAAQ,CAACrE,OAAO,CAACyD,UAAU,CAAChE,IAAI,CAAM,CAAC,CAAC6E,IAAI,GAAG,CAAE;IACjF,IAAMxE,KAAK,GAAGyE,IAAI,CAACC,GAAG,CAAC,IAAI,CAACnG,OAAO,CAACoG,QAAQ,EACrB,IAAI,CAACpG,OAAO,CAACqG,eAAe,GAAGvE,EAAE,GAAG,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAACC,QAAQ,GAAGuB,EAAE,GAAG,CAAC,CAAC;IAC9F,IAAME,SAAS,GAAG,OAAO;IACzB,OAAO;MAACF,EAAE;MAAEzB,EAAE;MAAE0B,cAAc;MAAEC,SAAS;MAAEhC,KAAK;MAAEiC,MAAM;IAAA,CAAC;EAC3D,CAAC;EAOM1C,oCAAU,GAAjB,UAAkBE,IAA2B;;IAC3C,IAAI,CAACC,WAAW,CAACD,IAAI,CAAC;IAItB,IAAI,CAACP,SAAS,CAAC2F,KAAK,EAAE;IACtB,IAAI,CAAC3F,SAAS,CAAC4F,SAAS,CAAE,IAAI,CAAChF,WAAsC,CAACiF,YAAY,CAAC;IAInF,IAAI,WAAW,IAAItF,IAAI,EAAE;;QACvB,KAAqB,kBAAEA,IAAY,CAACuF,SAAS,EAAqB,6CAAE;UAA/D,IAAMC,MAAM;UACf,IAAI,CAAC/F,SAAS,CAAC4F,SAAS,CAACG,MAAM,CAAC;;;;;;;;;;;;;;IAMpC,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAChG,SAAS,CAAC;IACrC,IAAI,CAACiG,aAAa,CAAC,IAAI,CAACjG,SAAS,CAAC;IAIlC,IAAMkG,KAAK,GAAG,IAAI,CAAC3F,IAAI,CAAC,OAAO,EAAE;MAAC4F,EAAE,EAAE;IAAY,CAAC,EAAE,CAAC,IAAI,CAACC,IAAI,CAAC,IAAI,GAAG,IAAI,CAACpG,SAAS,CAACqG,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC;IACvG,OAAOH,KAAU;EACnB,CAAC;EAKS7F,uCAAa,GAAvB,UAAwB0F,MAAiB;IACvCA,MAAM,CAACH,SAAS,CAAC,IAAI,CAAC1F,IAAI,CAAC6F,MAAM,CAAC;EACpC,CAAC;EAKS1F,0CAAgB,GAA1B,UAA2B0F,MAAiB;;;MAC1C,KAAmB,sBAAI,CAAClG,OAAO,CAACyG,QAAQ,EAAE,6CAAE;QAAvC,IAAMC,IAAI;QACb,IAAI,CAACC,cAAc,CAAC,IAAI,CAAC3G,OAAO,CAAC4G,YAAY,CAACF,IAAI,CAAC,EAAER,MAAM,CAAC;;;;;;;;;;;;;EAEhE,CAAC;EAMS1F,wCAAc,GAAxB,UAAyBqG,KAA2B,EAAEX,MAAiB;IACrEA,MAAM,CAACH,SAAS,CAACc,KAAK,CAACX,MAAM,CAAC;EAChC,CAAC;EAOS1F,qCAAW,GAArB,UAAsBE,IAA2B;IAC/C,IAAIA,IAAI,EAAE;MACR,IAAI,CAACoG,QAAQ,GAAGpG,IAAI;MACpB,IAAI,CAACS,OAAO,CAAC2F,QAAQ,GAAGpG,IAAI,CAACoG,QAAQ;;EAEzC,CAAC;EASMtG,8BAAI,GAAX,UAAYuG,IAAY,EAAEC,GAAoB,EAAEC,OAAuB,EAAEC,EAAW;IAA1D;MAAAF,QAAoB;IAAA;IAAE;MAAAC,YAAuB;IAAA;IACrE,OAAO,IAAI,CAAC9F,OAAO,CAACP,IAAI,CAACmG,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAEC,EAAE,CAAC;EAClD,CAAC;EAOM1G,8BAAI,GAAX,UAAY+F,IAAY;IACtB,OAAO,IAAI,CAACpF,OAAO,CAACoF,IAAI,CAACA,IAAI,CAAC;EAChC,CAAC;EAOM/F,+BAAK,GAAZ,UAAa2G,CAAS,EAAEC,CAAa;IAAb;MAAAA,KAAa;IAAA;IACnC,IAAI1B,IAAI,CAAC2B,GAAG,CAACF,CAAC,CAAC,GAAG,KAAK,EAAE;MACvB,OAAO,GAAG;;IAEZ,OAAOA,CAAC,CAACG,OAAO,CAACF,CAAC,CAAC,CAACG,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC3C,CAAC;EAyBM/G,qCAAW,GAAlB,UAAmB+F,IAAY,EAAEiB,OAAe,EAAEnH,IAAsC;IAAtC;MAAAA,QAAqB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;IAAA;IACtF,IAAMO,IAAI,GAAG,IAAI,CAAC6G,WAAW,CAAClB,IAAI,EAAEiB,OAAO,CAAC;IAC5C,IAAIA,OAAO,KAAK,eAAe,EAAE;MAC/B,IAAMtB,MAAM,GAAG,IAAI,CAACwB,aAAa,CAACrH,IAAI,CAAC;MACvC,IAAI,CAACc,OAAO,CAACwG,aAAa,CAAC/G,IAAI,EAAE;QAACyD,KAAK,EAAE6B;MAAM,CAAC,CAAC;;IAEnD,OAAO,IAAI,CAAC0B,wBAAwB,CAAChH,IAAI,EAAE2F,IAAI,EAAEiB,OAAO,EAAEnH,IAAI,CAAC;EACjE,CAAC;EAYMG,kDAAwB,GAA/B,UACE+F,IAAO,EAAEsB,KAAa,EAAEL,OAAe,EACvCnH,IAAsC;IAAtC;MAAAA,QAAqB,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;IAAA;IAEtC,IAAImH,OAAO,KAAK,eAAe,EAAE;MAC/BA,OAAO,GAAG,CAACnH,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,CAAC,CAACyH,IAAI,CAAC,GAAG,CAAC;;IAE7E,IAAI,CAAC,IAAI,CAACxH,YAAY,CAACyD,GAAG,CAACyD,OAAO,CAAC,EAAE;MACnC,IAAI,CAAClH,YAAY,CAAC0D,GAAG,CAACwD,OAAO,EAAE,IAAIjH,GAAG,EAAE,CAAC;;IAE3C,IAAMqC,GAAG,GAAG,IAAI,CAACtC,YAAY,CAACwC,GAAG,CAAC0E,OAAO,CAAC;IAC1C,IAAMO,MAAM,GAAGnF,GAAG,CAACE,GAAG,CAAC+E,KAAK,CAAC;IAC7B,IAAIE,MAAM,EAAE,OAAOA,MAAM;IACzB,IAAM9F,IAAI,GAAG,IAAI,CAAC+F,eAAe,CAACzB,IAAI,CAAC;IACvC3D,GAAG,CAACoB,GAAG,CAAC6D,KAAK,EAAE5F,IAAI,CAAC;IACpB,OAAOA,IAAI;EACb,CAAC;EAiBMzB,wCAAc,GAArB,UAAsByH,GAAM;IAC1B,IAAM9G,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAM8F,OAAO,GAAI,IAAI,CAACvG,IAAI,CAAC,eAAe,EAAE;MAAC2D,KAAK,EAAE;QAACxB,OAAO,EAAE;MAAc;IAAC,CAAC,EAAE,CAAC1B,OAAO,CAACwD,KAAK,CAACsD,GAAG,CAAC,CAAC,CAAC;IACrG,IAAMC,IAAI,GAAG,IAAI,CAACxH,IAAI,CAAC,cAAc,EAAE;MAAC2D,KAAK,EAAE;QAACxB,OAAO,EAAE,cAAc;QAAEyB,KAAK,EAAE,CAAC;QAAEE,MAAM,EAAE;MAAC;IAAC,CAAC,CAAC;IAC/F,IAAMH,KAAK,GAAG;MACZI,QAAQ,EAAE,UAAU;MACpB5B,OAAO,EAAE,cAAc;MACvB,aAAa,EAAE,SAAS;MACxB,aAAa,EAAE;KAChB;IACD,IAAMjC,IAAI,GAAG,IAAI,CAACF,IAAI,CAAC,iBAAiB,EAAE;MAAC2D,KAAK;IAAA,CAAC,EAAE,CAAC6D,IAAI,EAAEjB,OAAO,CAAC,CAAC;IACnE9F,OAAO,CAAC4D,MAAM,CAAC5D,OAAO,CAACoB,MAAM,CAAC,IAAI,CAAC9B,IAAI,CAAC+B,KAAK,CAAC5B,IAAI,CAAC,EAAE,IAAI,CAACiB,SAAS,CAAC;IACpEV,OAAO,CAAC4D,MAAM,CAAC,IAAI,CAAClD,SAAS,EAAEjB,IAAI,CAAC;IACpC,IAAMmC,EAAE,GAAG,IAAI,CAACtC,IAAI,CAACS,OAAO,CAAC6B,EAAE,GAAG,IAAI,CAACtC,IAAI,CAACS,OAAO,CAACD,KAAK;IACnD,SAA6BE,OAAO,CAACqE,QAAQ,CAACyB,OAAO,CAAC;MAArDxB,IAAI;MAAEZ,KAAK;MAAEsD,MAAM;MAAEC,GAAG,SAA6B;IAC5D,IAAMhD,CAAC,GAAG,CAACP,KAAK,GAAGY,IAAI,IAAI1C,EAAE;IAC7B,IAAMsC,CAAC,GAAG,CAAClE,OAAO,CAACqE,QAAQ,CAAC0C,IAAI,CAAC,CAACE,GAAG,GAAGA,GAAG,IAAIrF,EAAE;IACjD,IAAMsF,CAAC,GAAG,CAACF,MAAM,GAAGC,GAAG,IAAIrF,EAAE,GAAGsC,CAAC;IACjClE,OAAO,CAAC0C,MAAM,CAAC,IAAI,CAAChC,SAAS,CAAC;IAC9BV,OAAO,CAAC0C,MAAM,CAACjD,IAAI,CAAC;IACpB,OAAO;MAACwE,CAAC;MAAEC,CAAC;MAAEgD,CAAC;IAAA,CAAC;EAClB,CAAC;EAOM7H,uCAAa,GAApB,UAAqBH,IAAiB,EAAE6F,MAAsB;IAAtB;MAAAA,WAAsB;IAAA;IACtD,gBAAyB7F,IAAI;MAA5B6C,MAAM;MAAEoF,MAAM;MAAEC,IAAI,QAAQ;IACnCrC,MAAM,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC7F,IAAI,CAACoD,SAAS,CAACP,MAAM,CAAC;IACnD,IAAIoF,MAAM,EAAEpC,MAAM,CAAC,YAAY,CAAC,GAAG,QAAQ;IAC3C,IAAIqC,IAAI,EAAErC,MAAM,CAAC,aAAa,CAAC,GAAG,MAAM;IACxC,OAAOA,MAAM;EACf,CAAC;EAMM1F,qCAAW,GAAlB,UAAmB0F,MAAc;IAC/B,IAAI,CAACA,MAAM,EAAE;MACXA,MAAM,GAAG,IAAIsC,kBAAM,EAAE;;IAEvB,OAAO,CAAC,IAAI,CAACnI,IAAI,CAACoD,SAAS,CAACyC,MAAM,CAACpD,GAAG,CAAC,aAAa,CAAC,CAAC,EAC9CoD,MAAM,CAACpD,GAAG,CAAC,YAAY,CAAC,KAAK,QAAQ,EACrCoD,MAAM,CAACpD,GAAG,CAAC,aAAa,CAAC,KAAK,MAAM,CAAgB;EAC9D,CAAC;EAnkBatC,oBAAI,GAAW,QAAQ;EAKvBA,uBAAO,yBACdiI,gCAAiB,CAAC9I,OAAO;IAC9BsB,KAAK,EAAE,CAAC;IACR2E,QAAQ,EAAE,EAAE;IACZxC,gBAAgB,EAAE,KAAK;IACvBG,iBAAiB,EAAE,KAAK;IACxBmF,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,OAAO;IACnBC,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,EAAE;IAClBvD,QAAQ,EAAE,EAAE;IACZwD,YAAY,EAAE,QAAQ;IACtBC,aAAa,EAAE,GAAG;IAClB9I,cAAc,EAAE,IAAI;IACpBI,IAAI,EAAE,IAAI;IACVF,SAAS,EAAE;EAAI;EAMHK,4BAAY,GAAiB,EAAE;EA2iB/C,sBAAC;CAAA,CA1kBSiI,gCAAiB;AANLO","names":["__extends","options","defaultFactory","defaultFont","OPTIONS","jaxOptions","fontOptions","_super","_this","factory","wrapperFactory","jax","cssStyles","StyleList_js_1","font","unknownCache","Map","CommonOutputJax","math","html","setDocument","node","createNode","toDOM","constructor","NAME","scale","metrics","adaptor","setStyle","pxPerEm","ex","params","x_height","root","setTeXclass","setScale","nodeMap","container","processMath","executeFilters","postFilters","bbox","wrap","getOuterBBox","maps","getMetricMaps","parent_1","parent","start","state","MathItem_js_1","METRICS","map","display","get","em","containerWidth","lineWidth","family","setMetrics","mtextInheritFont","outputData","mtextFamily","merrorInheritFont","merrorFamily","getFamily","test","getTestElement","measureMetrics","remove","domMaps","has","set","keys","i","values","testInline","style","width","overflow","height","position","testDisplay","clone","firstChild","right","lastChild","append","fontFamily","fontSize","nodeSize","childNode","w","h","exFactor","getStyle","nodeBBox","left","Math","max","minScale","matchFontHeight","clear","addStyles","commonStyles","getStyles","styles","addWrapperStyles","addFontStyles","sheet","id","text","cssText","getKinds","kind","addClassStyles","getNodeClass","CLASS","document","type","def","content","ns","m","n","abs","toFixed","replace","variant","unknownText","cssFontStyles","setAttributes","measureTextNodeWithCache","chars","join","cached","measureTextNode","xml","base","bottom","top","d","italic","bold","Styles_js_1","OutputJax_js_1","mtextFont","merrorFont","mathmlSpacing","skipAttributes","displayAlign","displayIndent","exports"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/output/common/OutputJax.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the abstract class for the CommonOutputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AbstractOutputJax} from '../../core/OutputJax.js';\nimport {MathDocument} from '../../core/MathDocument.js';\nimport {MathItem, Metrics, STATE} from '../../core/MathItem.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport {FontData, FontDataClass, CharOptions, DelimiterData, CssFontData} from './FontData.js';\nimport {OptionList, separateOptions} from '../../util/Options.js';\nimport {CommonWrapper, AnyWrapper, AnyWrapperClass} from './Wrapper.js';\nimport {CommonWrapperFactory, AnyWrapperFactory} from './WrapperFactory.js';\nimport {percent} from '../../util/lengths.js';\nimport {StyleList, Styles} from '../../util/Styles.js';\nimport {StyleList as CssStyleList, CssStyles} from '../../util/StyleList.js';\n\n/*****************************************************************/\n\nexport interface ExtendedMetrics extends Metrics {\n  family: string;     // the font family for the surrounding text\n}\n\n/**\n * Maps linking a node to the test node it contains,\n *  and a map linking a node to the metrics within that node.\n */\nexport type MetricMap<N> = Map<N, ExtendedMetrics>;\ntype MetricDomMap<N> = Map<N, N>;\n\n/**\n * Maps for unknown characters\n */\nexport type UnknownBBox = {w: number, h: number, d: number};\nexport type UnknownMap = Map<string, UnknownBBox>;\nexport type UnknownVariantMap = Map<string, UnknownMap>;\n\n/*****************************************************************/\n\n/**\n *  The CommonOutputJax class on which the CHTML and SVG jax are built\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n * @template W  The Wrapper class\n * @template F  The WrapperFactory class\n * @template FD The FontData class\n * @template FC The FontDataClass object\n */\nexport abstract class CommonOutputJax<\n  N, T, D,\n  W extends AnyWrapper,\n  F extends AnyWrapperFactory,\n  FD extends FontData<any, any, any>,\n  FC extends FontDataClass<any, any, any>\n> extends AbstractOutputJax<N, T, D> {\n\n  /**\n   * The name of this output jax\n   */\n  public static NAME: string = 'Common';\n\n  /**\n   * @override\n   */\n  public static OPTIONS: OptionList = {\n      ...AbstractOutputJax.OPTIONS,\n    scale: 1,                      // global scaling factor for all expressions\n    minScale: .5,                  // smallest scaling factor to use\n    mtextInheritFont: false,       // true to make mtext elements use surrounding font\n    merrorInheritFont: false,      // true to make merror text use surrounding font\n    mtextFont: '',                 // font to use for mtext, if not inheriting (empty means use MathJax fonts)\n    merrorFont: 'serif',           // font to use for merror, if not inheriting (empty means use MathJax fonts)\n    mathmlSpacing: false,          // true for MathML spacing rules, false for TeX rules\n    skipAttributes: {},            // RFDa and other attributes NOT to copy to the output\n    exFactor: .5,                  // default size of ex in em units\n    displayAlign: 'center',        // default for indentalign when set to 'auto'\n    displayIndent: '0',            // default for indentshift when set to 'auto'\n    wrapperFactory: null,          // The wrapper factory to use\n    font: null,                    // The FontData object to use\n    cssStyles: null                // The CssStyles object to use\n  };\n\n  /**\n   *  The default styles for the output jax\n   */\n  public static commonStyles: CssStyleList = {};\n\n  /**\n   * Used for collecting styles needed for the output jax\n   */\n  public cssStyles: CssStyles;\n\n  /**\n   * The MathDocument for the math we find\n   */\n  public document: MathDocument<N, T, D>;\n\n  /**\n   * the MathItem currently being processed\n   */\n  public math: MathItem<N, T, D>;\n\n  /**\n   * The container element for the math\n   */\n  public container: N;\n\n  /**\n   * The top-level table, if any\n   */\n  public table: AnyWrapper;\n\n  /**\n   * The pixels per em for the math item being processed\n   */\n  public pxPerEm: number;\n\n  /**\n   * The data for the font in use\n   */\n  public font: FD;\n\n  /**\n   * The wrapper factory for the MathML nodes\n   */\n  public factory: F;\n\n  /**\n   * A map from the nodes in the expression currently being processed to the\n   * wrapper nodes for them (used by functions like core() to locate the wrappers\n   * from the core nodes)\n   */\n  public nodeMap: Map<MmlNode, W>;\n\n  /**\n   * Node used to test for in-line metric data\n   */\n  public testInline: N;\n\n  /**\n   * Node used to test for display metric data\n   */\n  public testDisplay: N;\n\n  /**\n   * Cache of unknonw character bounding boxes for this element\n   */\n  protected unknownCache: UnknownVariantMap;\n\n  /*****************************************************************/\n\n  /**\n   * Get the WrapperFactory and connect it to this output jax\n   * Get the cssStyle and font objects\n   *\n   * @param {OptionList} options         The configuration options\n   * @param {CommonWrapperFactory} defaultFactory  The default wrapper factory class\n   * @param {FC} defaultFont  The default FontData constructor\n   * @constructor\n   */\n  constructor(options: OptionList = null,\n              defaultFactory: typeof CommonWrapperFactory = null,\n              defaultFont: FC = null) {\n    const [jaxOptions, fontOptions] = separateOptions(options, defaultFont.OPTIONS);\n    super(jaxOptions);\n    this.factory = this.options.wrapperFactory ||\n      new defaultFactory<CommonOutputJax<N, T, D, W, F, FD, FC>, W,\n    AnyWrapperClass, CharOptions, DelimiterData, FD>();\n    this.factory.jax = this;\n    this.cssStyles = this.options.cssStyles || new CssStyles();\n    this.font = this.options.font || new defaultFont(fontOptions);\n    this.unknownCache = new Map();\n  }\n\n  /*****************************************************************/\n\n  /**\n   * Save the math document\n   * Create the mjx-container node\n   * Create the DOM output for the root MathML math node in the container\n   * Return the container node\n   *\n   * @override\n   */\n  public typeset(math: MathItem<N, T, D>, html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    let node = this.createNode();\n    this.toDOM(math, node, html);\n    return node;\n  }\n\n  /**\n   * @return {N}  The container DOM node for the typeset math\n   */\n  protected createNode(): N {\n    const jax = (this.constructor as typeof CommonOutputJax).NAME;\n    return this.html('mjx-container', {'class': 'MathJax', jax: jax});\n  }\n\n  /**\n   * @param {N} node   The container whose scale is to be set\n   */\n  protected setScale(node: N) {\n    const scale = this.math.metrics.scale * this.options.scale;\n    if (scale !== 1) {\n      this.adaptor.setStyle(node, 'fontSize', percent(scale));\n    }\n  }\n\n  /**\n   * Save the math document, if any, and the math item\n   * Set the document where HTML nodes will be created via the adaptor\n   * Recursively set the TeX classes for the nodes\n   * Set the scaling for the DOM node\n   * Create the nodeMap (maps MathML nodes to corresponding wrappers)\n   * Create the HTML output for the root MathML node in the container\n   * Clear the nodeMape\n   * Execute the post-filters\n   *\n   * @param {MathItem} math      The math item to convert\n   * @param {N} node             The contaier to place the result into\n   * @param {MathDocument} html  The document containing the math\n   */\n  public toDOM(math: MathItem<N, T, D>, node: N, html: MathDocument<N, T, D> = null) {\n    this.setDocument(html);\n    this.math = math;\n    this.pxPerEm = math.metrics.ex / this.font.params.x_height;\n    math.root.setTeXclass(null);\n    this.setScale(node);\n    this.nodeMap = new Map<MmlNode, W>();\n    this.container = node;\n    this.processMath(math.root, node);\n    this.nodeMap = null;\n    this.executeFilters(this.postFilters, math, html, node);\n  }\n\n  /**\n   * This is the actual typesetting function supplied by the subclass\n   *\n   * @param {MmlNode} math   The intenral MathML node of the root math element to process\n   * @param {N} node         The container node where the math is to be typeset\n   */\n  protected abstract processMath(math: MmlNode, node: N): void;\n\n  /*****************************************************************/\n\n  /**\n   * @param {MathItem} math      The MathItem to get the bounding box for\n   * @param {MathDocument} html  The MathDocument for the math\n   */\n  public getBBox(math: MathItem<N, T, D>, html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    this.math = math;\n    math.root.setTeXclass(null);\n    this.nodeMap = new Map<MmlNode, W>();\n    let bbox = this.factory.wrap(math.root).getOuterBBox();\n    this.nodeMap = null;\n    return bbox;\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @override\n   */\n  public getMetrics(html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    const adaptor = this.adaptor;\n    const maps = this.getMetricMaps(html);\n    for (const math of html.math) {\n      const parent = adaptor.parent(math.start.node);\n      if (math.state() < STATE.METRICS && parent) {\n        const map = maps[math.display ? 1 : 0];\n        const {em, ex, containerWidth, lineWidth, scale, family} = map.get(parent);\n        math.setMetrics(em, ex, containerWidth, lineWidth, scale);\n        if (this.options.mtextInheritFont) {\n          math.outputData.mtextFamily = family;\n        }\n        if (this.options.merrorInheritFont) {\n          math.outputData.merrorFamily = family;\n        }\n        math.state(STATE.METRICS);\n      }\n    }\n  }\n\n  /**\n   * @param {N} node            The container node whose metrics are to be measured\n   * @param {boolean} display   True if the metrics are for displayed math\n   * @return {Metrics}          Object containing em, ex, containerWidth, etc.\n   */\n  public getMetricsFor(node: N, display: boolean): ExtendedMetrics {\n    const getFamily = (this.options.mtextInheritFont || this.options.merrorInheritFont);\n    const test = this.getTestElement(node, display);\n    const metrics = this.measureMetrics(test, getFamily);\n    this.adaptor.remove(test);\n    return metrics;\n  }\n\n  /**\n   * Get a MetricMap for the math list\n   *\n   * @param {MathDocument} html  The math document whose math list is to be processed.\n   * @return {MetricMap[]}       The node-to-metrics maps for all the containers that have math\n   */\n  protected getMetricMaps(html: MathDocument<N, T, D>): MetricMap<N>[] {\n    const adaptor = this.adaptor;\n    const domMaps = [new Map() as MetricDomMap<N>, new Map() as MetricDomMap<N>];\n    //\n    // Add the test elements all at once (so only one reflow)\n    // Currently, we do one test for each container element for in-line and one for display math\n    //   (since we need different techniques for the two forms to avoid a WebKit bug).\n    //   This may need to be changed to handle floating elements better, since that has to be\n    //   done at the location of the math itself, not necessarily the end of the container.\n    //\n    for (const math of html.math) {\n      const node = adaptor.parent(math.start.node);\n      if (node && math.state() < STATE.METRICS) {\n        const map = domMaps[math.display ? 1 : 0];\n        if (!map.has(node)) {\n          map.set(node, this.getTestElement(node, math.display));\n        }\n      }\n    }\n    //\n    // Measure the metrics for all the mapped elements\n    //\n    const getFamily = this.options.mtextInheritFont || this.options.merrorInheritFont;\n    const maps = [new Map() as MetricMap<N>, new Map() as MetricMap<N>];\n    for (const i of maps.keys()) {\n      for (const node of domMaps[i].keys()) {\n        maps[i].set(node, this.measureMetrics(domMaps[i].get(node), getFamily));\n      }\n    }\n    //\n    // Remove the test elements\n    //\n    for (const i of maps.keys()) {\n      for (const node of domMaps[i].values()) {\n        adaptor.remove(node);\n      }\n    }\n    return maps;\n  }\n\n  /**\n   * @param {N} node    The math element to be measured\n   * @return {N}        The test elements that were added\n   */\n  protected getTestElement(node: N, display: boolean): N {\n    const adaptor = this.adaptor;\n    if (!this.testInline) {\n      this.testInline = this.html('mjx-test', {style: {\n        display:            'inline-block',\n        width:              '100%',\n        'font-style':       'normal',\n        'font-weight':      'normal',\n        'font-size':        '100%',\n        'font-size-adjust': 'none',\n        'text-indent':      0,\n        'text-transform':   'none',\n        'letter-spacing':   'normal',\n        'word-spacing':     'normal',\n        overflow:           'hidden',\n        height:             '1px',\n        'margin-right':     '-1px'\n      }}, [\n        this.html('mjx-left-box', {style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'left'\n        }}),\n        this.html('mjx-ex-box', {style: {\n          position: 'absolute',\n          overflow: 'hidden',\n          width: '1px', height: '60ex'\n        }}),\n        this.html('mjx-right-box', {style: {\n          display: 'inline-block',\n          width: 0,\n          'float': 'right'\n        }})\n      ]);\n      this.testDisplay = adaptor.clone(this.testInline);\n      adaptor.setStyle(this.testDisplay, 'display', 'table');\n      adaptor.setStyle(this.testDisplay, 'margin-right', '');\n      adaptor.setStyle(adaptor.firstChild(this.testDisplay) as N, 'display', 'none');\n      const right = adaptor.lastChild(this.testDisplay) as N;\n      adaptor.setStyle(right, 'display', 'table-cell');\n      adaptor.setStyle(right, 'width', '10000em');\n      adaptor.setStyle(right, 'float', '');\n    }\n    return adaptor.append(node, adaptor.clone(display ? this.testDisplay : this.testInline) as N) as N;\n  }\n\n  /**\n   * @param {N} node              The test node to measure\n   * @param {boolean} getFamily   True if font family of surroundings is to be determined\n   * @return {ExtendedMetrics}    The metric data for the given node\n   */\n  protected measureMetrics(node: N, getFamily: boolean): ExtendedMetrics {\n    const adaptor = this.adaptor;\n    const family = (getFamily ? adaptor.fontFamily(node) : '');\n    const em = adaptor.fontSize(node);\n    const [w, h] = adaptor.nodeSize(adaptor.childNode(node, 1) as N);\n    const ex = (w ? h / 60 : em * this.options.exFactor);\n    const containerWidth = (!w ? 1000000 : adaptor.getStyle(node, 'display') === 'table' ?\n                            adaptor.nodeSize(adaptor.lastChild(node) as N)[0] - 1 :\n                            adaptor.nodeBBox(adaptor.lastChild(node) as N).left -\n                            adaptor.nodeBBox(adaptor.firstChild(node) as N).left - 2);\n    const scale = Math.max(this.options.minScale,\n                           this.options.matchFontHeight ? ex / this.font.params.x_height / em : 1);\n    const lineWidth = 1000000;      // no linebreaking (otherwise would be a percentage of cwidth)\n    return {em, ex, containerWidth, lineWidth, scale, family};\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @override\n   */\n  public styleSheet(html: MathDocument<N, T, D>) {\n    this.setDocument(html);\n    //\n    // Start with the common styles\n    //\n    this.cssStyles.clear();\n    this.cssStyles.addStyles((this.constructor as typeof CommonOutputJax).commonStyles);\n    //\n    // Add document-specific styles\n    //\n    if ('getStyles' in html) {\n      for (const styles of ((html as any).getStyles() as CssStyleList[])) {\n        this.cssStyles.addStyles(styles);\n      }\n    }\n    //\n    // Gather the CSS from the classes and font\n    //\n    this.addWrapperStyles(this.cssStyles);\n    this.addFontStyles(this.cssStyles);\n    //\n    // Create the stylesheet for the CSS\n    //\n    const sheet = this.html('style', {id: 'MJX-styles'}, [this.text('\\n' + this.cssStyles.cssText + '\\n')]);\n    return sheet as N;\n  }\n\n  /**\n   * @param {CssStyles} styles   The style object to add to\n   */\n  protected addFontStyles(styles: CssStyles) {\n    styles.addStyles(this.font.styles);\n  }\n\n  /**\n   * @param {CssStyles} styles   The style object to add to\n   */\n  protected addWrapperStyles(styles: CssStyles) {\n    for (const kind of this.factory.getKinds()) {\n      this.addClassStyles(this.factory.getNodeClass(kind), styles);\n    }\n  }\n\n  /**\n   * @param {typeof CommonWrapper} CLASS  The Wrapper class whose styles are to be added\n   * @param {CssStyles} styles            The style object to add to.\n   */\n  protected addClassStyles(CLASS: typeof CommonWrapper, styles: CssStyles) {\n    styles.addStyles(CLASS.styles);\n  }\n\n  /*****************************************************************/\n\n  /**\n   * @param {MathDocument} html  The document to be used\n   */\n  protected setDocument(html: MathDocument<N, T, D>) {\n    if (html) {\n      this.document = html;\n      this.adaptor.document = html.document;\n    }\n  }\n\n  /**\n   * @param {string} type      The type of HTML node to create\n   * @param {OptionList} def   The properties to set on the HTML node\n   * @param {(N|T)[]} content  Array of child nodes to set for the HTML node\n   * @param {string} ns        The namespace for the element\n   * @return {N}               The newly created DOM tree\n   */\n  public html(type: string, def: OptionList = {}, content: (N | T)[] = [], ns?: string): N {\n    return this.adaptor.node(type, def, content, ns);\n  }\n\n  /**\n   * @param {string} text  The text string for which to make a text node\n   *\n   * @return {T}  A text node with the given text\n   */\n  public text(text: string): T {\n    return this.adaptor.text(text);\n  }\n\n  /**\n   * @param {number} m    A number to be shown with a fixed number of digits\n   * @param {number=} n   The number of digits to use\n   * @return {string}     The formatted number\n   */\n  public fixed(m: number, n: number = 3): string {\n    if (Math.abs(m) < .0006) {\n      return '0';\n    }\n    return m.toFixed(n).replace(/\\.?0+$/, '');\n  }\n\n  /*****************************************************************/\n  /*\n   *  Methods for handling text that is not in the current MathJax font\n   */\n\n  /**\n   * Create a DOM node for text from a specific CSS font, or that is\n   *  not in the current MathJax font\n   *\n   * @param {string} text        The text to be displayed\n   * @param {string} variant     The name of the variant for the text\n   * @return {N}                 The text element containing the text\n   */\n  public abstract unknownText(text: string, variant: string): N;\n\n  /**\n   * Measure text from a specific font, or that isn't in the MathJax font\n   *\n   * @param {string} text        The text to measure\n   * @param {string} variant     The variant for the text\n   * @param {CssFontData} font   The family, italic, and bold data for explicit fonts\n   * @return {UnknownBBox}       The width, height, and depth of the text (in ems)\n   */\n  public measureText(text: string, variant: string, font: CssFontData = ['', false, false]): UnknownBBox {\n    const node = this.unknownText(text, variant);\n    if (variant === '-explicitFont') {\n      const styles = this.cssFontStyles(font);\n      this.adaptor.setAttributes(node, {style: styles});\n    }\n    return this.measureTextNodeWithCache(node, text, variant, font);\n  }\n\n  /**\n   * Get the size of a text node, caching the result, and using\n   *   a cached result, if there is one.\n   *\n   * @param {N} text         The text element to measure\n   * @param {string} chars   The string contained in the text node\n   * @param {string} variant     The variant for the text\n   * @param {CssFontData} font   The family, italic, and bold data for explicit fonts\n   * @return {UnknownBBox}   The width, height and depth for the text\n   */\n  public measureTextNodeWithCache(\n    text: N, chars: string, variant: string,\n    font: CssFontData = ['', false, false]\n  ): UnknownBBox {\n    if (variant === '-explicitFont') {\n      variant = [font[0], font[1] ? 'T' : 'F', font[2] ? 'T' : 'F', ''].join('-');\n    }\n    if (!this.unknownCache.has(variant)) {\n      this.unknownCache.set(variant, new Map());\n    }\n    const map = this.unknownCache.get(variant);\n    const cached = map.get(chars);\n    if (cached) return cached;\n    const bbox = this.measureTextNode(text);\n    map.set(chars, bbox);\n    return bbox;\n  }\n\n  /**\n   * Measure the width of a text element by placing it in the page\n   *  and looking up its size (fake the height and depth, since we can't measure that)\n   *\n   * @param {N} text            The text element to measure\n   * @return {UnknownBBox}      The width, height and depth for the text (in ems)\n   */\n  public abstract measureTextNode(text: N): UnknownBBox;\n\n  /**\n   * Measure the width, height and depth of an annotation-xml node's content\n   *\n   * @param{N} xml          The xml content node to be measured\n   * @return {UnknownBBox}  The width, height, and depth of the content\n   */\n  public measureXMLnode(xml: N): UnknownBBox {\n    const adaptor = this.adaptor;\n    const content =  this.html('mjx-xml-block', {style: {display: 'inline-block'}}, [adaptor.clone(xml)]);\n    const base = this.html('mjx-baseline', {style: {display: 'inline-block', width: 0, height: 0}});\n    const style = {\n      position: 'absolute',\n      display: 'inline-block',\n      'font-family': 'initial',\n      'line-height': 'normal'\n    };\n    const node = this.html('mjx-measure-xml', {style}, [base, content]);\n    adaptor.append(adaptor.parent(this.math.start.node), this.container);\n    adaptor.append(this.container, node);\n    const em = this.math.metrics.em * this.math.metrics.scale;\n    const {left, right, bottom, top} = adaptor.nodeBBox(content);\n    const w = (right - left) / em;\n    const h = (adaptor.nodeBBox(base).top - top) / em;\n    const d = (bottom - top) / em - h;\n    adaptor.remove(this.container);\n    adaptor.remove(node);\n    return {w, h, d};\n  }\n\n  /**\n   * @param {CssFontData} font   The family, style, and weight for the given font\n   * @param {StyleList} styles   The style object to add the font data to\n   * @return {StyleList}         The modified (or initialized) style object\n   */\n  public cssFontStyles(font: CssFontData, styles: StyleList = {}): StyleList {\n    const [family, italic, bold] = font;\n    styles['font-family'] = this.font.getFamily(family);\n    if (italic) styles['font-style'] = 'italic';\n    if (bold) styles['font-weight'] = 'bold';\n    return styles;\n  }\n\n  /**\n   * @param {Styles} styles   The style object to query\n   * @return {CssFontData}    The family, italic, and boolean values\n   */\n  public getFontData(styles: Styles): CssFontData {\n    if (!styles) {\n      styles = new Styles();\n    }\n    return [this.font.getFamily(styles.get('font-family')),\n            styles.get('font-style') === 'italic',\n            styles.get('font-weight') === 'bold'] as CssFontData;\n  }\n\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}