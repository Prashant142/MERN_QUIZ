{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.newState = exports.STATE = exports.AbstractMathItem = exports.protoItem = void 0;\nfunction protoItem(open, math, close, n, start, end, display) {\n  if (display === void 0) {\n    display = null;\n  }\n  var item = {\n    open: open,\n    math: math,\n    close: close,\n    n: n,\n    start: {\n      n: start\n    },\n    end: {\n      n: end\n    },\n    display: display\n  };\n  return item;\n}\nexports.protoItem = protoItem;\nvar AbstractMathItem = function () {\n  function AbstractMathItem(math, jax, display, start, end) {\n    if (display === void 0) {\n      display = true;\n    }\n    if (start === void 0) {\n      start = {\n        i: 0,\n        n: 0,\n        delim: ''\n      };\n    }\n    if (end === void 0) {\n      end = {\n        i: 0,\n        n: 0,\n        delim: ''\n      };\n    }\n    this.root = null;\n    this.typesetRoot = null;\n    this.metrics = {};\n    this.inputData = {};\n    this.outputData = {};\n    this._state = exports.STATE.UNPROCESSED;\n    this.math = math;\n    this.inputJax = jax;\n    this.display = display;\n    this.start = start;\n    this.end = end;\n    this.root = null;\n    this.typesetRoot = null;\n    this.metrics = {};\n    this.inputData = {};\n    this.outputData = {};\n  }\n  Object.defineProperty(AbstractMathItem.prototype, \"isEscaped\", {\n    get: function () {\n      return this.display === null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractMathItem.prototype.render = function (document) {\n    document.renderActions.renderMath(this, document);\n  };\n  AbstractMathItem.prototype.rerender = function (document, start) {\n    if (start === void 0) {\n      start = exports.STATE.RERENDER;\n    }\n    if (this.state() >= start) {\n      this.state(start - 1);\n    }\n    document.renderActions.renderMath(this, document, start);\n  };\n  AbstractMathItem.prototype.convert = function (document, end) {\n    if (end === void 0) {\n      end = exports.STATE.LAST;\n    }\n    document.renderActions.renderConvert(this, document, end);\n  };\n  AbstractMathItem.prototype.compile = function (document) {\n    if (this.state() < exports.STATE.COMPILED) {\n      this.root = this.inputJax.compile(this, document);\n      this.state(exports.STATE.COMPILED);\n    }\n  };\n  AbstractMathItem.prototype.typeset = function (document) {\n    if (this.state() < exports.STATE.TYPESET) {\n      this.typesetRoot = document.outputJax[this.isEscaped ? 'escaped' : 'typeset'](this, document);\n      this.state(exports.STATE.TYPESET);\n    }\n  };\n  AbstractMathItem.prototype.updateDocument = function (_document) {};\n  AbstractMathItem.prototype.removeFromDocument = function (_restore) {\n    if (_restore === void 0) {\n      _restore = false;\n    }\n  };\n  AbstractMathItem.prototype.setMetrics = function (em, ex, cwidth, lwidth, scale) {\n    this.metrics = {\n      em: em,\n      ex: ex,\n      containerWidth: cwidth,\n      lineWidth: lwidth,\n      scale: scale\n    };\n  };\n  AbstractMathItem.prototype.state = function (state, restore) {\n    if (state === void 0) {\n      state = null;\n    }\n    if (restore === void 0) {\n      restore = false;\n    }\n    if (state != null) {\n      if (state < exports.STATE.INSERTED && this._state >= exports.STATE.INSERTED) {\n        this.removeFromDocument(restore);\n      }\n      if (state < exports.STATE.TYPESET && this._state >= exports.STATE.TYPESET) {\n        this.outputData = {};\n      }\n      if (state < exports.STATE.COMPILED && this._state >= exports.STATE.COMPILED) {\n        this.inputData = {};\n      }\n      this._state = state;\n    }\n    return this._state;\n  };\n  AbstractMathItem.prototype.reset = function (restore) {\n    if (restore === void 0) {\n      restore = false;\n    }\n    this.state(exports.STATE.UNPROCESSED, restore);\n  };\n  return AbstractMathItem;\n}();\nexports.AbstractMathItem = AbstractMathItem;\nexports.STATE = {\n  UNPROCESSED: 0,\n  FINDMATH: 10,\n  COMPILED: 20,\n  CONVERT: 100,\n  METRICS: 110,\n  RERENDER: 125,\n  TYPESET: 150,\n  INSERTED: 200,\n  LAST: 10000\n};\nfunction newState(name, state) {\n  if (name in exports.STATE) {\n    throw Error('State ' + name + ' already exists');\n  }\n  exports.STATE[name] = state;\n}\nexports.newState = newState;","map":{"version":3,"mappings":"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","names":["protoItem","open","math","close","n","start","end","display","item","exports","jax","i","delim","UNPROCESSED","inputJax","root","typesetRoot","metrics","inputData","outputData","Object","AbstractMathItem","document","renderActions","renderMath","RERENDER","state","LAST","renderConvert","COMPILED","compile","TYPESET","outputJax","isEscaped","_document","_restore","em","ex","cwidth","lwidth","scale","containerWidth","lineWidth","restore","INSERTED","_state","removeFromDocument","FINDMATH","CONVERT","METRICS","newState","name","Error"],"sources":["/Users/prashant/Desktop/react-quiz/node_modules/mathjax-full/ts/core/MathItem.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathItem objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument} from './MathDocument.js';\nimport {InputJax} from './InputJax.js';\nimport {OptionList} from '../util/Options.js';\nimport {MmlNode} from './MmlTree/MmlNode.js';\n\n/*****************************************************************/\n/**\n *  The Location gives a location of a position in a document\n *  (either a node and character position within it, or\n *  an index into a string array, the character position within\n *  the string, and the delimiter at that location).\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type Location<N, T> = {\n  i?: number;\n  n?: number;\n  delim?: string;\n  node?: N | T;\n};\n\n/*****************************************************************/\n/**\n *  The Metrics object includes the data needed to typeset\n *  a MathItem.\n */\nexport type Metrics = {\n  em: number;\n  ex: number;\n  containerWidth: number;\n  lineWidth: number;\n  scale: number;\n};\n\n/*****************************************************************/\n/**\n *  The MathItem interface\n *\n *  The MathItem is the object that holds the information about a\n *  particular expression on the page, including pointers to\n *  where it is in the document, its compiled version (in the\n *  internal format), its typeset version, its bounding box,\n *  and so on.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathItem<N, T, D> {\n  /**\n   * The string representing the expression to be processed\n   */\n  math: string;\n\n  /**\n   * The input jax used to process the math\n   */\n  inputJax: InputJax<N, T, D>;\n\n  /**\n   * Whether the math is in display mode or inline mode\n   */\n  display: boolean;\n\n  /**\n   * Whether this item is an escaped character or not\n   */\n  isEscaped: boolean;\n\n  /**\n   * The start and ending locations in the document of\n   *   this expression\n   */\n  start: Location<N, T>;\n  end: Location<N, T>;\n\n  /**\n   * The internal format for this expression (once compiled)\n   */\n  root: MmlNode;\n\n  /**\n   * The typeset version of the expression (once typeset)\n   */\n  typesetRoot: N;\n\n  /**\n   * The metric information at the location of the math\n   * (the em-size, scaling factor, etc.)\n   */\n  metrics: Metrics;\n\n  /**\n   * Extra data needed by the input or output jax, as needed\n   */\n  inputData: OptionList;\n  outputData: OptionList;\n\n  /**\n   * Perform the renderActions on the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  render(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Rerenders an already rendered item and inserts it into the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   * @param {number=} start          The state to start rerendering at (default = RERENDER)\n   */\n  rerender(document: MathDocument<N, T, D>, start?: number): void;\n\n  /**\n   * Converts the expression by calling the render actions until the state matches the end state\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   * @param {number=} end            The state to end rerendering at (default = LAST)\n   */\n  convert(document: MathDocument<N, T, D>, end?: number): void;\n\n  /**\n   * Converts the expression into the internal format by calling the input jax\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  compile(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Converts the internal format to the typeset version by calling the output jax\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  typeset(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Inserts the typeset version in place of the original form in the document\n   *\n   * @param {MathDocument} document  The MathDocument in which the math resides\n   */\n  updateDocument(document: MathDocument<N, T, D>): void;\n\n  /**\n   * Removes the typeset version from the document, optionally replacing the original\n   * form of the expression and its delimiters.\n   *\n   * @param {boolean} restore  True if the original version is to be restored\n   */\n  removeFromDocument(restore: boolean): void;\n\n  /**\n   * Sets the metric information for this expression\n   *\n   * @param {number} em      The size of 1 em in pixels\n   * @param {number} ex      The size of 1 ex in pixels\n   * @param {number} cwidth  The container width in pixels\n   * @param {number} lwidth  The line breaking width in pixels\n   * @param {number} scale   The scaling factor (unitless)\n   */\n  setMetrics(em: number, ex: number, cwidth: number, lwidth: number, scale: number): void;\n\n  /**\n   * Set or return the current processing state of this expression,\n   * optionally restoring the document if rolling back an expression\n   * that has been added to the document.\n   *\n   * @param {number} state    The state to set for the expression\n   * @param {number} restore  True if the original form should be restored\n   *                           to the document when rolling back a typeset version\n   * @returns {number}        The current state\n   */\n  state(state?: number, restore?: boolean): number;\n\n  /**\n   * Reset the item to its unprocessed state\n   *\n   * @param {number} restore  True if the original form should be restored\n   *                           to the document when rolling back a typeset version\n   */\n  reset(restore?: boolean): void;\n}\n\n/*****************************************************************/\n/**\n *  The ProtoItem interface\n *\n *  This is what is returned by the FindMath class, giving the location\n *  of math within the document, and is used to produce the full\n *  MathItem later (e.g., when the position within a string array\n *  is translated back into the actual node location in the DOM).\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type ProtoItem<N, T> = {\n  math: string;            // The math expression itself\n  start: Location<N, T>;   // The starting location of the math\n  end: Location<N, T>;     // The ending location of the math\n  open?: string;           // The opening delimiter\n  close?: string;          // The closing delimiter\n  n?: number;              // The index of the string in which this math is found\n  display: boolean;        // True means display mode, false is inline mode\n};\n\n/**\n *  Produce a proto math item that can be turned into a MathItem\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport function protoItem<N, T>(open: string, math: string, close: string, n: number,\n                                start: number, end: number, display: boolean = null) {\n  let item: ProtoItem<N, T> = {open: open, math: math, close: close,\n                               n: n, start: {n: start}, end: {n: end}, display: display};\n  return item;\n}\n\n/*****************************************************************/\n/**\n *  Implements the MathItem class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathItem<N, T, D> implements MathItem<N, T, D> {\n\n  /**\n   * The source text for the math (e.g., TeX string)\n   */\n  public math: string;\n\n  /**\n   * The input jax associated with this item\n   */\n\n  public inputJax: InputJax<N, T, D>;\n\n  /**\n   * True when this math is in display mode\n   */\n  public display: boolean;\n\n  /**\n   * Reference to the beginning of the math in the document\n   */\n  public start: Location<N, T>;\n  /**\n   * Reference to the end of the math in the document\n   */\n  public end: Location<N, T>;\n\n  /**\n   * The compiled internal MathML (result of InputJax)\n   */\n  public root: MmlNode = null;\n  /**\n   * The typeset result (result of OutputJax)\n   */\n  public typesetRoot: N = null;\n\n  /**\n   * The metric information about the surrounding environment\n   */\n  public metrics: Metrics = {} as Metrics;\n\n  /**\n   * Data private to the input jax\n   */\n  public inputData: OptionList = {};\n\n  /**\n   * Data private to the output jax\n   */\n  public outputData: OptionList = {};\n\n  /**\n   * The current state of the item (how far in the render actions it has been processed)\n   */\n  protected _state: number = STATE.UNPROCESSED;\n\n  /**\n   * @return {boolean}   True when this item is an escaped delimiter\n   */\n  public get isEscaped(): boolean {\n    return this.display === null;\n  }\n\n  /**\n   * @param {string} math      The math expression for this item\n   * @param {Inputjax} jax     The input jax to use for this item\n   * @param {boolean} display  True if display mode, false if inline\n   * @param {Location} start   The starting position of the math in the document\n   * @param {Location} end     The ending position of the math in the document\n   * @constructor\n   */\n  constructor (math: string, jax: InputJax<N, T, D>, display: boolean = true,\n               start: Location<N, T> = {i: 0, n: 0, delim: ''},\n               end: Location<N, T> = {i: 0, n: 0, delim: ''}) {\n    this.math = math;\n    this.inputJax = jax;\n    this.display = display;\n    this.start = start;\n    this.end = end;\n    this.root = null;\n    this.typesetRoot = null;\n    this.metrics = {} as Metrics;\n    this.inputData = {};\n    this.outputData = {};\n  }\n\n  /**\n   * @override\n   */\n  public render(document: MathDocument<N, T, D>) {\n    document.renderActions.renderMath(this, document);\n  }\n\n  /**\n   * @override\n   */\n  public rerender(document: MathDocument<N, T, D>, start: number = STATE.RERENDER) {\n    if (this.state() >= start) {\n      this.state(start - 1);\n    }\n    document.renderActions.renderMath(this, document, start);\n  }\n\n  /**\n   * @override\n   */\n  public convert(document: MathDocument<N, T, D>, end: number = STATE.LAST) {\n    document.renderActions.renderConvert(this, document, end);\n  }\n\n  /**\n   * @override\n   */\n  public compile(document: MathDocument<N, T, D>) {\n    if (this.state() < STATE.COMPILED) {\n      this.root = this.inputJax.compile(this, document);\n      this.state(STATE.COMPILED);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public typeset(document: MathDocument<N, T, D>) {\n    if (this.state() < STATE.TYPESET) {\n      this.typesetRoot = document.outputJax[this.isEscaped ? 'escaped' : 'typeset'](this, document);\n      this.state(STATE.TYPESET);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument(_document: MathDocument<N, T, D>) {}\n\n  /**\n   * @override\n   */\n  public removeFromDocument(_restore: boolean = false) {}\n\n  /**\n   * @override\n   */\n  public setMetrics(em: number, ex: number, cwidth: number, lwidth: number, scale: number) {\n    this.metrics = {\n      em: em, ex: ex,\n      containerWidth: cwidth,\n      lineWidth: lwidth,\n      scale: scale\n    };\n  }\n\n  /**\n   * @override\n   */\n  public state(state: number = null, restore: boolean = false) {\n    if (state != null) {\n      if (state < STATE.INSERTED && this._state >= STATE.INSERTED) {\n        this.removeFromDocument(restore);\n      }\n      if (state < STATE.TYPESET && this._state >= STATE.TYPESET) {\n        this.outputData = {};\n      }\n      if (state < STATE.COMPILED && this._state >= STATE.COMPILED) {\n        this.inputData = {};\n      }\n      this._state = state;\n    }\n    return this._state;\n  }\n\n  /**\n   * @override\n   */\n  public reset(restore: boolean = false) {\n    this.state(STATE.UNPROCESSED, restore);\n  }\n\n}\n\n/*****************************************************************/\n/**\n * The various states that a MathItem (or MathDocument) can be in\n *   (open-ended so that extensions can add to it)\n */\nexport const STATE: {[state: string]: number} = {\n  UNPROCESSED: 0,\n  FINDMATH: 10,\n  COMPILED: 20,\n  CONVERT: 100,\n  METRICS: 110,\n  RERENDER: 125,\n  TYPESET: 150,\n  INSERTED: 200,\n  LAST: 10000\n};\n\n/**\n * Allocate a new named state\n *\n * @param {string} name    The name of the new state\n * @param {number} state   The value for the new state\n */\nexport function newState(name: string, state: number) {\n  if (name in STATE) {\n    throw Error('State ' + name + ' already exists');\n  }\n  STATE[name] = state;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}